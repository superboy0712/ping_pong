
hello_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000a58  00000aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800120  00800120  00000b0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e2a  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d1  00000000  00000000  00002ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000763  00000000  00000000  00003397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00003afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ab  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e75  00000000  00000000  00004377  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  000051ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__ctors_end>
   4:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
   8:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
   c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  10:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  14:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  18:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  1c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  20:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  24:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  28:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  2c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  30:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  34:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  38:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  3c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  40:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  44:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  48:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  4c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  50:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  54:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  58:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  5c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  60:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  64:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  68:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  6c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>

00000070 <Menu_1_2>:
  70:	00 01 05 01 82 00 e4 00 05 01 5a 02 00 00 31 2e     ..........Z...1.
  80:	32 00                                               2.

00000082 <Menu_1_1>:
  82:	00 00 70 00 05 01 e4 00 05 01 5a 02 00 00 31 2e     ..p.......Z...1.
  92:	31 00                                               1.

00000094 <Menu_4>:
  94:	14 05 05 01 af 00 05 01 05 01 5a 02 00 00 49 20     ..........Z...I 
  a4:	61 6d 20 46 6f 75 72 74 68 0a 00                    am Fourth..

000000af <Menu_3>:
  af:	0f 04 94 00 c9 00 05 01 05 01 5a 02 00 00 49 20     ..........Z...I 
  bf:	61 6d 20 54 68 69 72 64 0a 00                       am Third..

000000c9 <Menu_2>:
  c9:	0a 03 af 00 e4 00 05 01 05 01 5a 02 00 00 49 20     ..........Z...I 
  d9:	61 6d 20 53 65 63 6f 6e 64 0a 00                    am Second..

000000e4 <Menu_1>:
  e4:	05 02 c9 00 05 01 05 01 82 00 5a 02 00 00 49 20     ..........Z...I 
  f4:	6c 6f 76 65 20 5a 68 61 6e 67 20 59 75 6e 21 0a     love Zhang Yun!.
	...

00000105 <NULL_MENU>:
	...

00000113 <font>:
 113:	00 00 00 00 00 00 00 5e 00 00 00 0e 00 0e 00 28     .......^.......(
 123:	7c 28 7c 28 08 54 7c 54 20 26 10 08 64 00 28 54     |(|(.T|T &..d.(T
 133:	28 40 00 00 00 0e 00 00 00 3c 42 00 00 00 42 3c     (@.......<B...B<
 143:	00 00 00 54 38 54 00 10 10 7c 10 10 00 80 60 20     ...T8T...|....` 
 153:	00 10 10 10 10 00 00 60 60 00 00 20 10 08 04 00     .......``.. ....
 163:	00 3c 42 3c 00 00 44 7e 40 00 44 62 52 4c 00 22     .<B<..D~@.DbRL."
 173:	4a 4a 36 00 18 14 7e 10 00 2e 4a 4a 32 00 3c 4a     JJ6...~...JJ2.<J
 183:	4a 30 00 02 62 1a 06 00 34 4a 4a 34 00 0c 52 52     J0..b...4JJ4..RR
 193:	3c 00 00 6c 6c 00 00 80 6c 2c 00 00 00 10 28 44     <..ll...l,....(D
 1a3:	00 28 28 28 28 00 00 44 28 10 00 00 04 52 0c 00     .((((..D(....R..
 1b3:	3c 42 5a 1c 00 7c 12 12 7c 00 7e 4a 4a 34 00 3c     <BZ..|..|.~JJ4.<
 1c3:	42 42 24 00 7e 42 42 3c 00 7e 4a 4a 42 00 7e 0a     BB$.~BB<.~JJB.~.
 1d3:	0a 02 00 3c 42 52 74 00 7e 08 08 7e 00 00 42 7e     ...<BRt.~..~..B~
 1e3:	42 00 20 40 40 3e 00 7e 18 24 42 00 7e 40 40 40     B. @@>.~.$B.~@@@
 1f3:	00 7e 0c 0c 7e 00 7e 0c 30 7e 00 3c 42 42 3c 00     .~..~.~.0~.<BB<.
 203:	7e 12 12 0c 00 3c 62 42 bc 00 7e 12 32 4c 00 24     ~....<bB..~.2L.$
 213:	4a 52 24 00 00 02 7e 02 00 3e 40 40 3e 00 1e 60     JR$...~..>@@>..`
 223:	60 1e 00 7e 30 30 7e 00 66 18 18 66 00 00 0e 70     `..~00~.f..f...p
 233:	0e 00 62 52 4a 46 00 00 7e 42 42 00 04 08 10 20     ..bRJF..~BB.... 
 243:	00 00 42 42 7e 00 00 04 02 04 00 40 40 40 40 00     ..BB~......@@@@.
 253:	00 02 04 00 00 30 48 28 78 00 7e 48 48 30 00 30     .....0H(x.~HH0.0
 263:	48 48 00 00 30 48 48 7e 00 30 68 58 10 00 10 7c     HH..0HH~.0hX...|
 273:	12 04 00 50 a8 a8 98 00 7e 08 08 70 00 00 48 7a     ...P....~..p..Hz
 283:	40 00 00 40 80 7a 00 7e 10 28 40 00 00 42 7e 40     @..@.z.~.(@..B~@
 293:	00 78 10 18 70 00 78 08 08 70 00 30 48 48 30 00     .x..p.x..p.0HH0.
 2a3:	f8 48 48 30 00 30 48 48 f8 00 78 08 08 10 00 50     .HH0.0HH..x....P
 2b3:	58 68 28 00 08 3e 48 40 00 38 40 40 78 00 00 38     Xh(..>H@.8@@x..8
 2c3:	40 38 00 78 60 60 78 00 48 30 30 48 00 18 a0 40     @8.x``x.H00H...@
 2d3:	38 00 48 68 58 48 00 00 08 3c 42 00 00 00 7e 00     8.HhXH...<B...~.
 2e3:	00 00 42 3c 08 00 04 02 04 02 00                    ..B<.......

000002ee <__ctors_end>:
 2ee:	11 24       	eor	r1, r1
 2f0:	1f be       	out	0x3f, r1	; 63
 2f2:	cf ef       	ldi	r28, 0xFF	; 255
 2f4:	d4 e0       	ldi	r29, 0x04	; 4
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	cd bf       	out	0x3d, r28	; 61

000002fa <__do_copy_data>:
 2fa:	11 e0       	ldi	r17, 0x01	; 1
 2fc:	a0 e0       	ldi	r26, 0x00	; 0
 2fe:	b1 e0       	ldi	r27, 0x01	; 1
 300:	e8 e5       	ldi	r30, 0x58	; 88
 302:	fa e0       	ldi	r31, 0x0A	; 10
 304:	02 c0       	rjmp	.+4      	; 0x30a <__do_copy_data+0x10>
 306:	05 90       	lpm	r0, Z+
 308:	0d 92       	st	X+, r0
 30a:	a0 32       	cpi	r26, 0x20	; 32
 30c:	b1 07       	cpc	r27, r17
 30e:	d9 f7       	brne	.-10     	; 0x306 <__do_copy_data+0xc>

00000310 <__do_clear_bss>:
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	a0 e2       	ldi	r26, 0x20	; 32
 314:	b1 e0       	ldi	r27, 0x01	; 1
 316:	01 c0       	rjmp	.+2      	; 0x31a <.do_clear_bss_start>

00000318 <.do_clear_bss_loop>:
 318:	1d 92       	st	X+, r1

0000031a <.do_clear_bss_start>:
 31a:	a1 33       	cpi	r26, 0x31	; 49
 31c:	b2 07       	cpc	r27, r18
 31e:	e1 f7       	brne	.-8      	; 0x318 <.do_clear_bss_loop>
 320:	0e 94 70 02 	call	0x4e0	; 0x4e0 <main>
 324:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <_exit>

00000328 <__bad_interrupt>:
 328:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000032c <adc_read>:
uint8_t adc_read(int channel)
{
	uint8_t data=0;
	int i=0;
	
	volatile uint8_t *p_write= (uint8_t *) (ADC_ADDR_START+channel);
 32c:	fc 01       	movw	r30, r24
 32e:	fc 5e       	subi	r31, 0xEC	; 236
	volatile uint8_t *p_read= (uint8_t*) (ADC_ADDR_START);
	*p_write=channel;		//select Channel of ADC
 330:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	26 ea       	ldi	r18, 0xA6	; 166
 334:	2a 95       	dec	r18
 336:	f1 f7       	brne	.-4      	; 0x334 <adc_read+0x8>
 338:	00 c0       	rjmp	.+0      	; 0x33a <adc_read+0xe>
	_delay_us(500);
	
	data=*p_read;		//read data from ADC
 33a:	80 91 00 14 	lds	r24, 0x1400
	i=data;
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	36 ea       	ldi	r19, 0xA6	; 166
 342:	3a 95       	dec	r19
 344:	f1 f7       	brne	.-4      	; 0x342 <adc_read+0x16>
 346:	00 c0       	rjmp	.+0      	; 0x348 <adc_read+0x1c>
	_delay_us(500);
	data=*p_read;		//read data from ADC
 348:	20 91 00 14 	lds	r18, 0x1400
	i+=data;
 34c:	82 0f       	add	r24, r18
 34e:	91 1d       	adc	r25, r1
 350:	26 ea       	ldi	r18, 0xA6	; 166
 352:	2a 95       	dec	r18
 354:	f1 f7       	brne	.-4      	; 0x352 <adc_read+0x26>
 356:	00 c0       	rjmp	.+0      	; 0x358 <adc_read+0x2c>
	_delay_us(500);
	data=*p_read;		//read data from ADC
 358:	20 91 00 14 	lds	r18, 0x1400
 35c:	36 ea       	ldi	r19, 0xA6	; 166
 35e:	3a 95       	dec	r19
 360:	f1 f7       	brne	.-4      	; 0x35e <adc_read+0x32>
 362:	00 c0       	rjmp	.+0      	; 0x364 <adc_read+0x38>
	i+=data;
 364:	82 0f       	add	r24, r18
 366:	91 1d       	adc	r25, r1
	_delay_us(500);

	data=(uint8_t) (i/3);		//Average 3 samples
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__divmodhi4>
 370:	86 2f       	mov	r24, r22
	return data;
	
}
 372:	08 95       	ret

00000374 <adc_calibrate>:
	
	
	volatile uint8_t *p_read= (uint8_t *) (ADC_ADDR_START);
	
	
	data=*p_read;		//read data from ADC
 374:	20 91 00 14 	lds	r18, 0x1400
	i=data;
 378:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37a:	4f e3       	ldi	r20, 0x3F	; 63
 37c:	8d e0       	ldi	r24, 0x0D	; 13
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	41 50       	subi	r20, 0x01	; 1
 382:	80 40       	sbci	r24, 0x00	; 0
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <adc_calibrate+0xc>
 388:	00 c0       	rjmp	.+0      	; 0x38a <adc_calibrate+0x16>
 38a:	00 00       	nop
	_delay_ms(1000);
	data=*p_read;
 38c:	80 91 00 14 	lds	r24, 0x1400
	i+=data;
 390:	28 0f       	add	r18, r24
 392:	31 1d       	adc	r19, r1
 394:	4f e3       	ldi	r20, 0x3F	; 63
 396:	8d e0       	ldi	r24, 0x0D	; 13
 398:	93 e0       	ldi	r25, 0x03	; 3
 39a:	41 50       	subi	r20, 0x01	; 1
 39c:	80 40       	sbci	r24, 0x00	; 0
 39e:	90 40       	sbci	r25, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <adc_calibrate+0x26>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <adc_calibrate+0x30>
 3a4:	00 00       	nop
	_delay_ms(1000);
	data=*p_read;
 3a6:	80 91 00 14 	lds	r24, 0x1400
	i+=data;
 3aa:	28 0f       	add	r18, r24
 3ac:	31 1d       	adc	r19, r1
	
	data=(uint8_t) (i/3);			//Average 10 samples
 3ae:	ab ea       	ldi	r26, 0xAB	; 171
 3b0:	ba ea       	ldi	r27, 0xAA	; 170
 3b2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__umulhisi3>
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	2f e3       	ldi	r18, 0x3F	; 63
 3bc:	3d e0       	ldi	r19, 0x0D	; 13
 3be:	43 e0       	ldi	r20, 0x03	; 3
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	30 40       	sbci	r19, 0x00	; 0
 3c4:	40 40       	sbci	r20, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <adc_calibrate+0x4c>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <adc_calibrate+0x56>
 3ca:	00 00       	nop
	_delay_ms(1000);
	return data;
	
}
 3cc:	08 95       	ret

000003ce <adc_init>:

static uint8_t x_mean=0,y_mean=0;

void adc_init(void)
{
	MCUCR |= (1<<SRE);		//Enable XMEM interface
 3ce:	85 b7       	in	r24, 0x35	; 53
 3d0:	80 68       	ori	r24, 0x80	; 128
 3d2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);		//Mask out higher 4 bits of address
 3d4:	80 b7       	in	r24, 0x30	; 48
 3d6:	80 62       	ori	r24, 0x20	; 32
 3d8:	80 bf       	out	0x30, r24	; 48
	x_mean=adc_calibrate(X_CH);
 3da:	86 e0       	ldi	r24, 0x06	; 6
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 ba 01 	call	0x374	; 0x374 <adc_calibrate>
 3e2:	80 93 21 01 	sts	0x0121, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e6:	80 e1       	ldi	r24, 0x10	; 16
 3e8:	8a 95       	dec	r24
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <adc_init+0x1a>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <adc_init+0x20>
	_delay_us(50);
	y_mean=adc_calibrate(Y_CH);
 3ee:	84 e0       	ldi	r24, 0x04	; 4
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 ba 01 	call	0x374	; 0x374 <adc_calibrate>
 3f6:	80 93 20 01 	sts	0x0120, r24
 3fa:	80 e1       	ldi	r24, 0x10	; 16
 3fc:	8a 95       	dec	r24
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <adc_init+0x2e>
 400:	00 c0       	rjmp	.+0      	; 0x402 <adc_init+0x34>
 402:	08 95       	ret

00000404 <position>:
	
}

void position(signed int *x_val,signed int *y_val,uint8_t x_mean,uint8_t y_mean)
{
	*x_val=(signed int) ((*x_val-x_mean)*100/128);
 404:	dc 01       	movw	r26, r24
 406:	ed 91       	ld	r30, X+
 408:	fc 91       	ld	r31, X
 40a:	e4 1b       	sub	r30, r20
 40c:	f1 09       	sbc	r31, r1
 40e:	34 e6       	ldi	r19, 0x64	; 100
 410:	3e 9f       	mul	r19, r30
 412:	a0 01       	movw	r20, r0
 414:	3f 9f       	mul	r19, r31
 416:	50 0d       	add	r21, r0
 418:	11 24       	eor	r1, r1
 41a:	55 23       	and	r21, r21
 41c:	14 f4       	brge	.+4      	; 0x422 <position+0x1e>
 41e:	41 58       	subi	r20, 0x81	; 129
 420:	5f 4f       	sbci	r21, 0xFF	; 255
 422:	44 0f       	add	r20, r20
 424:	45 2f       	mov	r20, r21
 426:	44 1f       	adc	r20, r20
 428:	55 0b       	sbc	r21, r21
 42a:	fc 01       	movw	r30, r24
 42c:	51 83       	std	Z+1, r21	; 0x01
 42e:	40 83       	st	Z, r20
	*y_val=(signed int) ((*y_val-y_mean)*100/128);
 430:	db 01       	movw	r26, r22
 432:	8d 91       	ld	r24, X+
 434:	9c 91       	ld	r25, X
 436:	fc 01       	movw	r30, r24
 438:	e2 1b       	sub	r30, r18
 43a:	f1 09       	sbc	r31, r1
 43c:	44 e6       	ldi	r20, 0x64	; 100
 43e:	4e 9f       	mul	r20, r30
 440:	c0 01       	movw	r24, r0
 442:	4f 9f       	mul	r20, r31
 444:	90 0d       	add	r25, r0
 446:	11 24       	eor	r1, r1
 448:	99 23       	and	r25, r25
 44a:	14 f4       	brge	.+4      	; 0x450 <position+0x4c>
 44c:	81 58       	subi	r24, 0x81	; 129
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	88 0f       	add	r24, r24
 452:	89 2f       	mov	r24, r25
 454:	88 1f       	adc	r24, r24
 456:	99 0b       	sbc	r25, r25
 458:	db 01       	movw	r26, r22
 45a:	8d 93       	st	X+, r24
 45c:	9c 93       	st	X, r25
 45e:	08 95       	ret

00000460 <adc_get_position>:
}

//struct adc_pos {int16_t x; int16_t y;};
	
struct adc_pos adc_get_position(void){
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	00 d0       	rcall	.+0      	; 0x466 <adc_get_position+0x6>
 466:	00 d0       	rcall	.+0      	; 0x468 <adc_get_position+0x8>
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
	struct adc_pos pos;
	pos.x = adc_read(X_CH);
 46c:	86 e0       	ldi	r24, 0x06	; 6
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 96 01 	call	0x32c	; 0x32c <adc_read>
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	9a 83       	std	Y+2, r25	; 0x02
 478:	89 83       	std	Y+1, r24	; 0x01
	pos.y = adc_read(Y_CH);
 47a:	84 e0       	ldi	r24, 0x04	; 4
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 96 01 	call	0x32c	; 0x32c <adc_read>
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	9c 83       	std	Y+4, r25	; 0x04
 486:	8b 83       	std	Y+3, r24	; 0x03
	position(&(pos.x),&(pos.y), x_mean, y_mean);
 488:	20 91 20 01 	lds	r18, 0x0120
 48c:	40 91 21 01 	lds	r20, 0x0121
 490:	be 01       	movw	r22, r28
 492:	6d 5f       	subi	r22, 0xFD	; 253
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	0e 94 02 02 	call	0x404	; 0x404 <position>
	return pos;
 49e:	69 81       	ldd	r22, Y+1	; 0x01
 4a0:	7a 81       	ldd	r23, Y+2	; 0x02
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	9c 81       	ldd	r25, Y+4	; 0x04
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <generic_SelectCallback>:
static void genric_draw_fun(uint8_t x, uint8_t y, const char *str){
	oled_goto_xy(x,y);
	oled_putstr_P(str);
}

void generic_SelectCallback(uint8_t x, uint8_t y, const char* str){
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	ea 01       	movw	r28, r20
	oled_goto_xy(x,y);
 4ba:	0e 94 fd 03 	call	0x7fa	; 0x7fa <oled_goto_xy>
	oled_putstr_P_inverse(str);
 4be:	ce 01       	movw	r24, r28
 4c0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <oled_putstr_P_inverse>
}
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <genric_draw_fun>:
};
/*** END DUMY CODE ***/



static void genric_draw_fun(uint8_t x, uint8_t y, const char *str){
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	ea 01       	movw	r28, r20
	oled_goto_xy(x,y);
 4d0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <oled_goto_xy>
	oled_putstr_P(str);
 4d4:	ce 01       	movw	r24, r28
 4d6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <oled_putstr_P>
}
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <main>:
MENU_ITEM( Menu_1_2, 0, 1, NULL_MENU, Menu_1_1, Menu_1, NULL_MENU, generic_SelectCallback, NULL, "1.2");
static FILE oled_stdout =  FDEV_SETUP_STREAM(oled_putchar_printf, NULL, _FDEV_SETUP_WRITE);

int main(void)
{	/* Set up the default menu text write callback, and navigate to an absolute menu item entry. */
		stdout = &oled_stdout;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	90 93 2e 01 	sts	0x012E, r25
 4e8:	80 93 2d 01 	sts	0x012D, r24
		oled_init();
 4ec:	0e 94 ca 03 	call	0x794	; 0x794 <oled_init>
		oled_clear();
 4f0:	0e 94 61 04 	call	0x8c2	; 0x8c2 <oled_clear>
		oled_putstr_inverse("hello world!!\n");
 4f4:	80 e1       	ldi	r24, 0x10	; 16
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <oled_putstr_inverse>
		adc_init();
 4fc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <adc_init>
	Menu_SetGenericWriteCallback(genric_draw_fun);
 500:	85 e6       	ldi	r24, 0x65	; 101
 502:	92 e0       	ldi	r25, 0x02	; 2
 504:	0e 94 bf 03 	call	0x77e	; 0x77e <Menu_SetGenericWriteCallback>
	Menu_SetGenericClear(oled_clear);
 508:	81 e6       	ldi	r24, 0x61	; 97
 50a:	94 e0       	ldi	r25, 0x04	; 4
 50c:	0e 94 00 03 	call	0x600	; 0x600 <Menu_SetGenericClear>
	
	Menu_Navigate(&Menu_1);
 510:	84 ee       	ldi	r24, 0xE4	; 228
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Menu_Navigate>
	Menu_DrawBase();
 518:	0e 94 17 03 	call	0x62e	; 0x62e <Menu_DrawBase>
	Menu_Navigate(&Menu_1);
 51c:	84 ee       	ldi	r24, 0xE4	; 228
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Menu_Navigate>
			if (pos.y > 70)
			{
				button_val = BUTTON_UP;
			} else if (pos.y < -70)
			{
				button_val = BUTTON_DOWN;
 524:	02 e0       	ldi	r16, 0x02	; 2
		adc_pos_t pos = adc_get_position();
		//printf(" x: %d, y:%d \n", pos.x, pos.y);
		if( -20 < pos.x && pos.x < 20){
			if (pos.y > 70)
			{
				button_val = BUTTON_UP;
 526:	d1 e0       	ldi	r29, 0x01	; 1
			if (pos.x > 70)
			{
				button_val = BUTTON_RIGHT;
			} else if (pos.x < -70)
			{
				button_val = BUTTON_LEFT;
 528:	13 e0       	ldi	r17, 0x03	; 3
		}
		
		if( -20 < pos.y && pos.y < 20){
			if (pos.x > 70)
			{
				button_val = BUTTON_RIGHT;
 52a:	c4 e0       	ldi	r28, 0x04	; 4
	Menu_DrawBase();
	Menu_Navigate(&Menu_1);
	
	while (1)
    { 
		adc_pos_t pos = adc_get_position();
 52c:	0e 94 30 02 	call	0x460	; 0x460 <adc_get_position>
 530:	ab 01       	movw	r20, r22
		//printf(" x: %d, y:%d \n", pos.x, pos.y);
		if( -20 < pos.x && pos.x < 20){
 532:	9b 01       	movw	r18, r22
 534:	2d 5e       	subi	r18, 0xED	; 237
 536:	3f 4f       	sbci	r19, 0xFF	; 255
 538:	27 32       	cpi	r18, 0x27	; 39
 53a:	31 05       	cpc	r19, r1
 53c:	60 f4       	brcc	.+24     	; 0x556 <__stack+0x57>
			if (pos.y > 70)
 53e:	87 34       	cpi	r24, 0x47	; 71
 540:	91 05       	cpc	r25, r1
 542:	1c f0       	brlt	.+6      	; 0x54a <__stack+0x4b>
			{
				button_val = BUTTON_UP;
 544:	d0 93 22 01 	sts	0x0122, r29
 548:	06 c0       	rjmp	.+12     	; 0x556 <__stack+0x57>
			} else if (pos.y < -70)
 54a:	8a 3b       	cpi	r24, 0xBA	; 186
 54c:	2f ef       	ldi	r18, 0xFF	; 255
 54e:	92 07       	cpc	r25, r18
 550:	14 f4       	brge	.+4      	; 0x556 <__stack+0x57>
			{
				button_val = BUTTON_DOWN;
 552:	00 93 22 01 	sts	0x0122, r16
			}	
		}
		
		if( -20 < pos.y && pos.y < 20){
 556:	43 96       	adiw	r24, 0x13	; 19
 558:	87 97       	sbiw	r24, 0x27	; 39
 55a:	60 f4       	brcc	.+24     	; 0x574 <__stack+0x75>
			if (pos.x > 70)
 55c:	47 34       	cpi	r20, 0x47	; 71
 55e:	51 05       	cpc	r21, r1
 560:	1c f0       	brlt	.+6      	; 0x568 <__stack+0x69>
			{
				button_val = BUTTON_RIGHT;
 562:	c0 93 22 01 	sts	0x0122, r28
 566:	30 c0       	rjmp	.+96     	; 0x5c8 <__stack+0xc9>
			} else if (pos.x < -70)
 568:	4a 3b       	cpi	r20, 0xBA	; 186
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	1c f4       	brge	.+6      	; 0x574 <__stack+0x75>
			{
				button_val = BUTTON_LEFT;
 56e:	10 93 22 01 	sts	0x0122, r17
 572:	21 c0       	rjmp	.+66     	; 0x5b6 <__stack+0xb7>
		}

		/* Example usage of Micromenu - here you can create your custom menu navigation system; you may wish to perform
		 * other tasks while detecting key presses, enter sleep mode while waiting for user input, etc.
		 */
		switch (button_val)
 574:	80 91 22 01 	lds	r24, 0x0122
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	e9 f0       	breq	.+58     	; 0x5b6 <__stack+0xb7>
 57c:	28 f4       	brcc	.+10     	; 0x588 <__stack+0x89>
 57e:	81 30       	cpi	r24, 0x01	; 1
 580:	41 f0       	breq	.+16     	; 0x592 <__stack+0x93>
 582:	82 30       	cpi	r24, 0x02	; 2
 584:	79 f0       	breq	.+30     	; 0x5a4 <__stack+0xa5>
 586:	2b c0       	rjmp	.+86     	; 0x5de <__stack+0xdf>
 588:	84 30       	cpi	r24, 0x04	; 4
 58a:	f1 f0       	breq	.+60     	; 0x5c8 <__stack+0xc9>
 58c:	85 30       	cpi	r24, 0x05	; 5
 58e:	29 f1       	breq	.+74     	; 0x5da <__stack+0xdb>
 590:	26 c0       	rjmp	.+76     	; 0x5de <__stack+0xdf>
		{
			case BUTTON_UP:
				Menu_Navigate(MENU_PREVIOUS);
 592:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Menu_GetCurrentMenu>
 596:	04 96       	adiw	r24, 0x04	; 4
 598:	fc 01       	movw	r30, r24
 59a:	85 91       	lpm	r24, Z+
 59c:	94 91       	lpm	r25, Z
 59e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Menu_Navigate>
				break;
 5a2:	1d c0       	rjmp	.+58     	; 0x5de <__stack+0xdf>
			case BUTTON_DOWN:
				Menu_Navigate(MENU_NEXT);
 5a4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Menu_GetCurrentMenu>
 5a8:	02 96       	adiw	r24, 0x02	; 2
 5aa:	fc 01       	movw	r30, r24
 5ac:	85 91       	lpm	r24, Z+
 5ae:	94 91       	lpm	r25, Z
 5b0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Menu_Navigate>
				break;
 5b4:	14 c0       	rjmp	.+40     	; 0x5de <__stack+0xdf>
			case BUTTON_LEFT:
				Menu_Navigate(MENU_PARENT);
 5b6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Menu_GetCurrentMenu>
 5ba:	06 96       	adiw	r24, 0x06	; 6
 5bc:	fc 01       	movw	r30, r24
 5be:	85 91       	lpm	r24, Z+
 5c0:	94 91       	lpm	r25, Z
 5c2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Menu_Navigate>
				break;
 5c6:	0b c0       	rjmp	.+22     	; 0x5de <__stack+0xdf>
			case BUTTON_RIGHT:
				Menu_Navigate(MENU_CHILD);
 5c8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Menu_GetCurrentMenu>
 5cc:	08 96       	adiw	r24, 0x08	; 8
 5ce:	fc 01       	movw	r30, r24
 5d0:	85 91       	lpm	r24, Z+
 5d2:	94 91       	lpm	r25, Z
 5d4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Menu_Navigate>
				break;
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <__stack+0xdf>
			case BUTTON_ENTER:
				Menu_EnterCurrentItem();
 5da:	0e 94 05 03 	call	0x60a	; 0x60a <Menu_EnterCurrentItem>
				break;
			default:
				break;
		}
		button_val = BUTTON_NONE;
 5de:	10 92 22 01 	sts	0x0122, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e2:	9f ef       	ldi	r25, 0xFF	; 255
 5e4:	2f ef       	ldi	r18, 0xFF	; 255
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	91 50       	subi	r25, 0x01	; 1
 5ea:	20 40       	sbci	r18, 0x00	; 0
 5ec:	80 40       	sbci	r24, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <__stack+0xe9>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <__stack+0xf3>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <__stack+0xf5>
		_delay_ms(200);
    }
 5f4:	9b cf       	rjmp	.-202    	; 0x52c <__stack+0x2d>

000005f6 <Menu_GetCurrentMenu>:


Menu_Item_t* Menu_GetCurrentMenu(void)
{
	return CurrentMenuItem;
}
 5f6:	80 91 0e 01 	lds	r24, 0x010E
 5fa:	90 91 0f 01 	lds	r25, 0x010F
 5fe:	08 95       	ret

00000600 <Menu_SetGenericClear>:
{
	MenuWriteFunc = WriteFunc;
	Menu_Navigate(CurrentMenuItem);
}
void Menu_SetGenericClear(void (*ClrFunc)(void)){
	MenuClrFunc = ClrFunc;
 600:	90 93 26 01 	sts	0x0126, r25
 604:	80 93 25 01 	sts	0x0125, r24
 608:	08 95       	ret

0000060a <Menu_EnterCurrentItem>:
}
void Menu_EnterCurrentItem(void)
{
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 60a:	e0 91 0e 01 	lds	r30, 0x010E
 60e:	f0 91 0f 01 	lds	r31, 0x010F
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	e5 30       	cpi	r30, 0x05	; 5
 616:	f8 07       	cpc	r31, r24
 618:	49 f0       	breq	.+18     	; 0x62c <Menu_EnterCurrentItem+0x22>
 61a:	30 97       	sbiw	r30, 0x00	; 0
 61c:	39 f0       	breq	.+14     	; 0x62c <Menu_EnterCurrentItem+0x22>
		return;

	void (*EnterCallback)(void) = MENU_ITEM_READ_POINTER(&CurrentMenuItem->EnterCallback);
 61e:	3c 96       	adiw	r30, 0x0c	; 12
 620:	85 91       	lpm	r24, Z+
 622:	94 91       	lpm	r25, Z

	if (EnterCallback)
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	11 f0       	breq	.+4      	; 0x62c <Menu_EnterCurrentItem+0x22>
		EnterCallback();
 628:	fc 01       	movw	r30, r24
 62a:	09 95       	icall
 62c:	08 95       	ret

0000062e <Menu_DrawBase>:
}

/************************************************************************/
/* draw the base of the whole menu, all same level items of new         */
/************************************************************************/
void Menu_DrawBase(void){
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
static Menu_Item_t* CurrentMenuItem = &NULL_MENU;


Menu_Item_t* Menu_GetCurrentMenu(void)
{
	return CurrentMenuItem;
 632:	c0 91 0e 01 	lds	r28, 0x010E
 636:	d0 91 0f 01 	lds	r29, 0x010F
/************************************************************************/
/* draw the base of the whole menu, all same level items of new         */
/************************************************************************/
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
 63a:	21 e0       	ldi	r18, 0x01	; 1
 63c:	c5 30       	cpi	r28, 0x05	; 5
 63e:	d2 07       	cpc	r29, r18
 640:	09 f4       	brne	.+2      	; 0x644 <Menu_DrawBase+0x16>
 642:	5a c0       	rjmp	.+180    	; 0x6f8 <Menu_DrawBase+0xca>
 644:	20 97       	sbiw	r28, 0x00	; 0
 646:	09 f4       	brne	.+2      	; 0x64a <Menu_DrawBase+0x1c>
 648:	57 c0       	rjmp	.+174    	; 0x6f8 <Menu_DrawBase+0xca>
	return;
	// get the first item of the same level
	while (
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
 64a:	ce 01       	movw	r24, r28
 64c:	04 96       	adiw	r24, 0x04	; 4
 64e:	fc 01       	movw	r30, r24
 650:	25 91       	lpm	r18, Z+
 652:	34 91       	lpm	r19, Z
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
 654:	25 50       	subi	r18, 0x05	; 5
 656:	31 40       	sbci	r19, 0x01	; 1
 658:	a9 f0       	breq	.+42     	; 0x684 <Menu_DrawBase+0x56>
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
		 && (MENU_ITEM_READ_POINTER(&ptr->Previous) != NULL)
 65a:	fc 01       	movw	r30, r24
 65c:	25 91       	lpm	r18, Z+
 65e:	34 91       	lpm	r19, Z
 660:	23 2b       	or	r18, r19
 662:	81 f0       	breq	.+32     	; 0x684 <Menu_DrawBase+0x56>
		 )
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
 664:	fc 01       	movw	r30, r24
 666:	85 91       	lpm	r24, Z+
 668:	94 91       	lpm	r25, Z
 66a:	ec 01       	movw	r28, r24
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
 66c:	04 96       	adiw	r24, 0x04	; 4
 66e:	fc 01       	movw	r30, r24
 670:	25 91       	lpm	r18, Z+
 672:	34 91       	lpm	r19, Z
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
 674:	25 50       	subi	r18, 0x05	; 5
 676:	31 40       	sbci	r19, 0x01	; 1
 678:	29 f0       	breq	.+10     	; 0x684 <Menu_DrawBase+0x56>
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
		 && (MENU_ITEM_READ_POINTER(&ptr->Previous) != NULL)
 67a:	fc 01       	movw	r30, r24
 67c:	25 91       	lpm	r18, Z+
 67e:	34 91       	lpm	r19, Z
 680:	23 2b       	or	r18, r19
 682:	81 f7       	brne	.-32     	; 0x664 <Menu_DrawBase+0x36>
		 )
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
		
	// get the first item of the same level
	if (MenuWriteFunc){
 684:	20 91 27 01 	lds	r18, 0x0127
 688:	30 91 28 01 	lds	r19, 0x0128
 68c:	21 15       	cp	r18, r1
 68e:	31 05       	cpc	r19, r1
 690:	09 f4       	brne	.+2      	; 0x694 <Menu_DrawBase+0x66>
 692:	32 c0       	rjmp	.+100    	; 0x6f8 <Menu_DrawBase+0xca>
		MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
 694:	fe 01       	movw	r30, r28
 696:	31 96       	adiw	r30, 0x01	; 1
 698:	64 91       	lpm	r22, Z
 69a:	fe 01       	movw	r30, r28
 69c:	84 91       	lpm	r24, Z
 69e:	ae 01       	movw	r20, r28
 6a0:	42 5f       	subi	r20, 0xF2	; 242
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	f9 01       	movw	r30, r18
 6a6:	09 95       	icall
		while (( MENU_ITEM_READ_POINTER(&ptr->Next) != &NULL_MENU) && ( MENU_ITEM_READ_POINTER(&ptr->Next) != NULL)) {
 6a8:	22 96       	adiw	r28, 0x02	; 2
 6aa:	fe 01       	movw	r30, r28
 6ac:	85 91       	lpm	r24, Z+
 6ae:	94 91       	lpm	r25, Z
 6b0:	85 50       	subi	r24, 0x05	; 5
 6b2:	91 40       	sbci	r25, 0x01	; 1
 6b4:	09 f1       	breq	.+66     	; 0x6f8 <Menu_DrawBase+0xca>
 6b6:	fe 01       	movw	r30, r28
 6b8:	85 91       	lpm	r24, Z+
 6ba:	94 91       	lpm	r25, Z
 6bc:	89 2b       	or	r24, r25
 6be:	e1 f0       	breq	.+56     	; 0x6f8 <Menu_DrawBase+0xca>
			ptr = MENU_ITEM_READ_POINTER(&ptr->Next);
 6c0:	fe 01       	movw	r30, r28
 6c2:	c5 91       	lpm	r28, Z+
 6c4:	d4 91       	lpm	r29, Z
			MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
 6c6:	fe 01       	movw	r30, r28
 6c8:	31 96       	adiw	r30, 0x01	; 1
 6ca:	64 91       	lpm	r22, Z
 6cc:	fe 01       	movw	r30, r28
 6ce:	84 91       	lpm	r24, Z
 6d0:	ae 01       	movw	r20, r28
 6d2:	42 5f       	subi	r20, 0xF2	; 242
 6d4:	5f 4f       	sbci	r21, 0xFF	; 255
 6d6:	e0 91 27 01 	lds	r30, 0x0127
 6da:	f0 91 28 01 	lds	r31, 0x0128
 6de:	09 95       	icall
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
		
	// get the first item of the same level
	if (MenuWriteFunc){
		MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
		while (( MENU_ITEM_READ_POINTER(&ptr->Next) != &NULL_MENU) && ( MENU_ITEM_READ_POINTER(&ptr->Next) != NULL)) {
 6e0:	22 96       	adiw	r28, 0x02	; 2
 6e2:	fe 01       	movw	r30, r28
 6e4:	85 91       	lpm	r24, Z+
 6e6:	94 91       	lpm	r25, Z
 6e8:	85 50       	subi	r24, 0x05	; 5
 6ea:	91 40       	sbci	r25, 0x01	; 1
 6ec:	29 f0       	breq	.+10     	; 0x6f8 <Menu_DrawBase+0xca>
 6ee:	fe 01       	movw	r30, r28
 6f0:	85 91       	lpm	r24, Z+
 6f2:	94 91       	lpm	r25, Z
 6f4:	89 2b       	or	r24, r25
 6f6:	21 f7       	brne	.-56     	; 0x6c0 <Menu_DrawBase+0x92>
			ptr = MENU_ITEM_READ_POINTER(&ptr->Next);
			MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
		}
	}
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

000006fe <Menu_Navigate>:
{
	return CurrentMenuItem;
}

void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 702:	21 e0       	ldi	r18, 0x01	; 1
 704:	85 30       	cpi	r24, 0x05	; 5
 706:	92 07       	cpc	r25, r18
 708:	09 f4       	brne	.+2      	; 0x70c <Menu_Navigate+0xe>
 70a:	36 c0       	rjmp	.+108    	; 0x778 <Menu_Navigate+0x7a>
 70c:	00 97       	sbiw	r24, 0x00	; 0
 70e:	09 f4       	brne	.+2      	; 0x712 <Menu_Navigate+0x14>
 710:	33 c0       	rjmp	.+102    	; 0x778 <Menu_Navigate+0x7a>
		return;
	static Menu_Item_t* LastMenuItem;
	LastMenuItem = CurrentMenuItem;
 712:	e0 91 0e 01 	lds	r30, 0x010E
 716:	f0 91 0f 01 	lds	r31, 0x010F
 71a:	f0 93 24 01 	sts	0x0124, r31
 71e:	e0 93 23 01 	sts	0x0123, r30
	CurrentMenuItem = NewMenu;
 722:	90 93 0f 01 	sts	0x010F, r25
 726:	80 93 0e 01 	sts	0x010E, r24
	if (MENU_ITEM_READ_POINTER(&LastMenuItem->Parent) != MENU_ITEM_READ_POINTER(&NewMenu->Parent))
 72a:	36 96       	adiw	r30, 0x06	; 6
 72c:	25 91       	lpm	r18, Z+
 72e:	34 91       	lpm	r19, Z
 730:	06 96       	adiw	r24, 0x06	; 6
 732:	fc 01       	movw	r30, r24
 734:	85 91       	lpm	r24, Z+
 736:	94 91       	lpm	r25, Z
 738:	28 17       	cp	r18, r24
 73a:	39 07       	cpc	r19, r25
 73c:	29 f0       	breq	.+10     	; 0x748 <Menu_Navigate+0x4a>
	{
		// not the same level navigation, need to be refreshed
		MenuClrFunc();
 73e:	e0 91 25 01 	lds	r30, 0x0125
 742:	f0 91 26 01 	lds	r31, 0x0126
 746:	09 95       	icall
/*
	if (MenuWriteFunc)
		MenuWriteFunc(pgm_read_byte(&(CurrentMenuItem->pos_x)),pgm_read_byte(&(CurrentMenuItem->pos_y)),CurrentMenuItem->Text);
*/

	void (*SelectCallback)(uint8_t x, uint8_t y, const char* Text) = MENU_ITEM_READ_POINTER(&CurrentMenuItem->SelectCallback);
 748:	e0 91 0e 01 	lds	r30, 0x010E
 74c:	f0 91 0f 01 	lds	r31, 0x010F
 750:	3a 96       	adiw	r30, 0x0a	; 10
 752:	c5 91       	lpm	r28, Z+
 754:	d4 91       	lpm	r29, Z
	
	Menu_DrawBase();
 756:	0e 94 17 03 	call	0x62e	; 0x62e <Menu_DrawBase>
	if (SelectCallback)
 75a:	20 97       	sbiw	r28, 0x00	; 0
 75c:	69 f0       	breq	.+26     	; 0x778 <Menu_Navigate+0x7a>
		SelectCallback(pgm_read_byte(&(CurrentMenuItem->pos_x)),pgm_read_byte(&(CurrentMenuItem->pos_y)),CurrentMenuItem->Text);
 75e:	40 91 0e 01 	lds	r20, 0x010E
 762:	50 91 0f 01 	lds	r21, 0x010F
 766:	fa 01       	movw	r30, r20
 768:	31 96       	adiw	r30, 0x01	; 1
 76a:	64 91       	lpm	r22, Z
 76c:	fa 01       	movw	r30, r20
 76e:	84 91       	lpm	r24, Z
 770:	42 5f       	subi	r20, 0xF2	; 242
 772:	5f 4f       	sbci	r21, 0xFF	; 255
 774:	fe 01       	movw	r30, r28
 776:	09 95       	icall
}
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)(uint8_t x, uint8_t y, const char* Text))
{
	MenuWriteFunc = WriteFunc;
 77e:	90 93 28 01 	sts	0x0128, r25
 782:	80 93 27 01 	sts	0x0127, r24
	Menu_Navigate(CurrentMenuItem);
 786:	80 91 0e 01 	lds	r24, 0x010E
 78a:	90 91 0f 01 	lds	r25, 0x010F
 78e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Menu_Navigate>
 792:	08 95       	ret

00000794 <oled_init>:
}

 
 void oled_init(void)
 {
 	MCUCR |= (1<<SRE);        //Enable External Memory interface
 794:	85 b7       	in	r24, 0x35	; 53
 796:	80 68       	ori	r24, 0x80	; 128
 798:	85 bf       	out	0x35, r24	; 53
 	SFIOR |= (1<<XMM2);       //Mask out higher 4 bits of address
 79a:	80 b7       	in	r24, 0x30	; 48
 79c:	80 62       	ori	r24, 0x20	; 32
 79e:	80 bf       	out	0x30, r24	; 48
 	volatile uint8_t *addr= (uint8_t *) OLED_ADDR_CMD_START;		//selcet command mode
 	
 	//code copied from datasheet
 	*addr=0xae;				//turn display off
 7a0:	ef e0       	ldi	r30, 0x0F	; 15
 7a2:	f0 e1       	ldi	r31, 0x10	; 16
 7a4:	8e ea       	ldi	r24, 0xAE	; 174
 7a6:	80 83       	st	Z, r24
 	*addr=0xa1;			//column addr 127 is mapped to seg0
 7a8:	81 ea       	ldi	r24, 0xA1	; 161
 7aa:	80 83       	st	Z, r24
 	*addr=0xda;				//com pin configuration
 7ac:	8a ed       	ldi	r24, 0xDA	; 218
 7ae:	80 83       	st	Z, r24
 	*addr=0x12;				//com pin config=alternative
 7b0:	82 e1       	ldi	r24, 0x12	; 18
 7b2:	80 83       	st	Z, r24
 	*addr=0xc8;				//o/p scan direction com63 to com0
 7b4:	88 ec       	ldi	r24, 0xC8	; 200
 7b6:	80 83       	st	Z, r24
 	*addr=0xa8;				//multiplex ratio config
 7b8:	88 ea       	ldi	r24, 0xA8	; 168
 7ba:	80 83       	st	Z, r24
 	*addr=0x3f;				//ratio=63
 7bc:	8f e3       	ldi	r24, 0x3F	; 63
 7be:	80 83       	st	Z, r24
 	*addr=0xd5;				//dclck ratio
 7c0:	85 ed       	ldi	r24, 0xD5	; 213
 7c2:	80 83       	st	Z, r24
 	*addr=0x80;				//divide ratio and oscl. frequency
 7c4:	80 e8       	ldi	r24, 0x80	; 128
 7c6:	80 83       	st	Z, r24
 	*addr=0x81;				//contrast control
 7c8:	81 e8       	ldi	r24, 0x81	; 129
 7ca:	80 83       	st	Z, r24
 	*addr=0x50;				//value of contrast is 50h
 7cc:	80 e5       	ldi	r24, 0x50	; 80
 7ce:	80 83       	st	Z, r24
 	*addr=0xd9;				//set pre-charge period
 7d0:	89 ed       	ldi	r24, 0xD9	; 217
 7d2:	80 83       	st	Z, r24
 	*addr=0x21;				//value =21
 7d4:	81 e2       	ldi	r24, 0x21	; 33
 7d6:	80 83       	st	Z, r24
 	*addr=0x20;				//set memory addressing mode
 7d8:	80 e2       	ldi	r24, 0x20	; 32
 7da:	80 83       	st	Z, r24
 	*addr=0x00;				//horz addressing mode
 7dc:	10 82       	st	Z, r1
 	*addr=0xdb;				//vcom de-select level mode
 7de:	8b ed       	ldi	r24, 0xDB	; 219
 7e0:	80 83       	st	Z, r24
 	*addr=0x30;				//value=0.83vcc
 7e2:	80 e3       	ldi	r24, 0x30	; 48
 7e4:	80 83       	st	Z, r24
 	*addr=0xad;				//master configuration
 7e6:	8d ea       	ldi	r24, 0xAD	; 173
 7e8:	80 83       	st	Z, r24
 	*addr=0x00;				//select extrenal iref
 7ea:	10 82       	st	Z, r1
 	*addr=0xa4;				//out follows ram content
 7ec:	84 ea       	ldi	r24, 0xA4	; 164
 7ee:	80 83       	st	Z, r24
 	*addr=0xa6;				//set normal display
 7f0:	86 ea       	ldi	r24, 0xA6	; 166
 7f2:	80 83       	st	Z, r24
 	*addr=0xaf;				//display on
 7f4:	8f ea       	ldi	r24, 0xAF	; 175
 7f6:	80 83       	st	Z, r24
 7f8:	08 95       	ret

000007fa <oled_goto_xy>:



void oled_goto_xy(uint8_t col,uint8_t row){
	// input: 0 to max - min.
	current_col_address = col;
 7fa:	80 93 2a 01 	sts	0x012A, r24
	current_pag_address = row;
 7fe:	60 93 29 01 	sts	0x0129, r22
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
 802:	ef e0       	ldi	r30, 0x0F	; 15
 804:	f0 e1       	ldi	r31, 0x10	; 16
 806:	91 e2       	ldi	r25, 0x21	; 33
 808:	90 83       	st	Z, r25
 80a:	80 83       	st	Z, r24
 80c:	8f e7       	ldi	r24, 0x7F	; 127
 80e:	80 83       	st	Z, r24
 810:	82 e2       	ldi	r24, 0x22	; 34
 812:	80 83       	st	Z, r24
 814:	60 83       	st	Z, r22
 816:	86 e0       	ldi	r24, 0x06	; 6
 818:	80 83       	st	Z, r24
 81a:	08 95       	ret

0000081c <oled_goto_nextln>:
	oled_wr_cmd(END_PAGE);
}

void oled_goto_nextln(void){
	// input: 0 to max-min
	current_pag_address++;
 81c:	80 91 29 01 	lds	r24, 0x0129
 820:	8f 5f       	subi	r24, 0xFF	; 255
 822:	80 93 29 01 	sts	0x0129, r24
	if(current_pag_address > END_PAGE - START_PAGE)
 826:	80 91 29 01 	lds	r24, 0x0129
 82a:	87 30       	cpi	r24, 0x07	; 7
 82c:	10 f0       	brcs	.+4      	; 0x832 <oled_goto_nextln+0x16>
		current_pag_address = 0;
 82e:	10 92 29 01 	sts	0x0129, r1
	oled_goto_xy(0, current_pag_address);
 832:	60 91 29 01 	lds	r22, 0x0129
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	0e 94 fd 03 	call	0x7fa	; 0x7fa <oled_goto_xy>
 83c:	08 95       	ret

0000083e <oled_putchar>:
}
void oled_putchar( const char c){
 83e:	cf 93       	push	r28
	if(c == '\n'){
 840:	8a 30       	cpi	r24, 0x0A	; 10
 842:	19 f4       	brne	.+6      	; 0x84a <oled_putchar+0xc>
		oled_goto_nextln();
 844:	0e 94 0e 04 	call	0x81c	; 0x81c <oled_goto_nextln>
		return;
 848:	29 c0       	rjmp	.+82     	; 0x89c <oled_putchar+0x5e>
	}
	int i;
	const char j = (c-' ');
 84a:	c0 ee       	ldi	r28, 0xE0	; 224
 84c:	c8 0f       	add	r28, r24
	current_col_address+=CHA_WIDTH;
 84e:	80 91 2a 01 	lds	r24, 0x012A
 852:	8b 5f       	subi	r24, 0xFB	; 251
 854:	80 93 2a 01 	sts	0x012A, r24

	if(current_col_address/CHA_WIDTH >= MAX_CHARS_A_LINE){
 858:	80 91 2a 01 	lds	r24, 0x012A
 85c:	8d 37       	cpi	r24, 0x7D	; 125
 85e:	70 f0       	brcs	.+28     	; 0x87c <oled_putchar+0x3e>
		//current_col_address = 0;
		oled_goto_nextln();
 860:	0e 94 0e 04 	call	0x81c	; 0x81c <oled_goto_nextln>
 864:	0b c0       	rjmp	.+22     	; 0x87c <oled_putchar+0x3e>
 866:	fc 01       	movw	r30, r24
 868:	e2 0f       	add	r30, r18
 86a:	f3 1f       	adc	r31, r19
	}


	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		 oled_wr_d(pgm_read_byte(&font[(int)j][i]));
 86c:	e4 91       	lpm	r30, Z
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
 86e:	ec 93       	st	X, r30
		//current_col_address = 0;
		oled_goto_nextln();
	}


	for(i = 0; i < 5; i++){
 870:	2f 5f       	subi	r18, 0xFF	; 255
 872:	3f 4f       	sbci	r19, 0xFF	; 255
 874:	25 30       	cpi	r18, 0x05	; 5
 876:	31 05       	cpc	r19, r1
 878:	b1 f7       	brne	.-20     	; 0x866 <oled_putchar+0x28>
 87a:	10 c0       	rjmp	.+32     	; 0x89c <oled_putchar+0x5e>
 87c:	8c 2f       	mov	r24, r28
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	9c 01       	movw	r18, r24
 882:	22 0f       	add	r18, r18
 884:	33 1f       	adc	r19, r19
 886:	22 0f       	add	r18, r18
 888:	33 1f       	adc	r19, r19
 88a:	82 0f       	add	r24, r18
 88c:	93 1f       	adc	r25, r19
	current_pag_address++;
	if(current_pag_address > END_PAGE - START_PAGE)
		current_pag_address = 0;
	oled_goto_xy(0, current_pag_address);
}
void oled_putchar( const char c){
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	8d 5e       	subi	r24, 0xED	; 237
 894:	9e 4f       	sbci	r25, 0xFE	; 254
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
 896:	af e0       	ldi	r26, 0x0F	; 15
 898:	b2 e1       	ldi	r27, 0x12	; 18
 89a:	e5 cf       	rjmp	.-54     	; 0x866 <oled_putchar+0x28>

	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		 oled_wr_d(pgm_read_byte(&font[(int)j][i]));
	}
}
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <oled_putstr_P>:
}
void oled_putstr_inverse( const char * str){
	while(*str)
		oled_putchar_inverse(*str++);
}
void oled_putstr_P( const char * str){
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	ec 01       	movw	r28, r24
		char read = pgm_read_byte(str);
 8a6:	fc 01       	movw	r30, r24
 8a8:	84 91       	lpm	r24, Z
		// Display buffer on LCD.
		while(read){
 8aa:	88 23       	and	r24, r24
 8ac:	39 f0       	breq	.+14     	; 0x8bc <oled_putstr_P+0x1c>
			oled_putchar(read);
 8ae:	0e 94 1f 04 	call	0x83e	; 0x83e <oled_putchar>
			str++;
 8b2:	21 96       	adiw	r28, 0x01	; 1
			read = pgm_read_byte(str);
 8b4:	fe 01       	movw	r30, r28
 8b6:	84 91       	lpm	r24, Z
		oled_putchar_inverse(*str++);
}
void oled_putstr_P( const char * str){
		char read = pgm_read_byte(str);
		// Display buffer on LCD.
		while(read){
 8b8:	81 11       	cpse	r24, r1
 8ba:	f9 cf       	rjmp	.-14     	; 0x8ae <oled_putstr_P+0xe>
			oled_putchar(read);
			str++;
			read = pgm_read_byte(str);
		}
		
}
 8bc:	df 91       	pop	r29
 8be:	cf 91       	pop	r28
 8c0:	08 95       	ret

000008c2 <oled_clear>:
		read = pgm_read_byte(str);
	}
	
}
void oled_clear(void){
	current_col_address = 0;
 8c2:	10 92 2a 01 	sts	0x012A, r1
	current_pag_address = 0;
 8c6:	10 92 29 01 	sts	0x0129, r1
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
 8ca:	ef e0       	ldi	r30, 0x0F	; 15
 8cc:	f0 e1       	ldi	r31, 0x10	; 16
 8ce:	8e ea       	ldi	r24, 0xAE	; 174
 8d0:	80 83       	st	Z, r24
 8d2:	80 e2       	ldi	r24, 0x20	; 32
 8d4:	80 83       	st	Z, r24
 8d6:	10 82       	st	Z, r1
 8d8:	81 e2       	ldi	r24, 0x21	; 33
 8da:	80 83       	st	Z, r24
 8dc:	10 82       	st	Z, r1
 8de:	8f e7       	ldi	r24, 0x7F	; 127
 8e0:	80 83       	st	Z, r24
 8e2:	82 e2       	ldi	r24, 0x22	; 34
 8e4:	80 83       	st	Z, r24
 8e6:	10 82       	st	Z, r1
 8e8:	87 e0       	ldi	r24, 0x07	; 7
 8ea:	80 83       	st	Z, r24
 8ec:	80 e4       	ldi	r24, 0x40	; 64
 8ee:	80 83       	st	Z, r24
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	94 e0       	ldi	r25, 0x04	; 4
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
 8f4:	ef e0       	ldi	r30, 0x0F	; 15
 8f6:	f2 e1       	ldi	r31, 0x12	; 18
 8f8:	10 82       	st	Z, r1
 8fa:	01 97       	sbiw	r24, 0x01	; 1
	oled_wr_cmd(0x22);
	oled_wr_cmd(0);
	oled_wr_cmd(7);
	oled_wr_cmd(0x40);
	int temp;
	for(temp = 0; temp < 8*128; temp++){
 8fc:	00 97       	sbiw	r24, 0x00	; 0
 8fe:	e1 f7       	brne	.-8      	; 0x8f8 <oled_clear+0x36>
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
 900:	ef e0       	ldi	r30, 0x0F	; 15
 902:	f0 e1       	ldi	r31, 0x10	; 16
 904:	81 e2       	ldi	r24, 0x21	; 33
 906:	80 83       	st	Z, r24
 908:	10 82       	st	Z, r1
 90a:	8f e7       	ldi	r24, 0x7F	; 127
 90c:	80 83       	st	Z, r24
 90e:	82 e2       	ldi	r24, 0x22	; 34
 910:	80 83       	st	Z, r24
 912:	10 82       	st	Z, r1
 914:	86 e0       	ldi	r24, 0x06	; 6
 916:	80 83       	st	Z, r24
 918:	8c e7       	ldi	r24, 0x7C	; 124
 91a:	80 83       	st	Z, r24
 91c:	8f ea       	ldi	r24, 0xAF	; 175
 91e:	80 83       	st	Z, r24
	oled_wr_cmd(0x22);
	oled_wr_cmd(START_PAGE);
	oled_wr_cmd(END_PAGE);
	oled_wr_cmd(0x7c);
	oled_wr_cmd(0xaf); // on
	oled_goto_xy(0,0);
 920:	60 e0       	ldi	r22, 0x00	; 0
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	0e 94 fd 03 	call	0x7fa	; 0x7fa <oled_goto_xy>
 928:	08 95       	ret

0000092a <oled_putchar_printf>:
		oled_wr_d(0);
	}
}

int oled_putchar_printf(char var, FILE *stream){
	if(var == '\r'||var =='\n'){
 92a:	8d 30       	cpi	r24, 0x0D	; 13
 92c:	11 f0       	breq	.+4      	; 0x932 <oled_putchar_printf+0x8>
 92e:	8a 30       	cpi	r24, 0x0A	; 10
 930:	19 f4       	brne	.+6      	; 0x938 <oled_putchar_printf+0xe>
		oled_goto_nextln();
 932:	0e 94 0e 04 	call	0x81c	; 0x81c <oled_goto_nextln>
		return 0;
 936:	02 c0       	rjmp	.+4      	; 0x93c <oled_putchar_printf+0x12>
	}

	oled_putchar(var);
 938:	0e 94 1f 04 	call	0x83e	; 0x83e <oled_putchar>
	return 0;
}
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	08 95       	ret

00000942 <oled_putchar_inverse>:

void oled_putchar_inverse(char c){
 942:	cf 93       	push	r28
	if(c == '\n'){
 944:	8a 30       	cpi	r24, 0x0A	; 10
 946:	19 f4       	brne	.+6      	; 0x94e <oled_putchar_inverse+0xc>
		oled_goto_nextln();
 948:	0e 94 0e 04 	call	0x81c	; 0x81c <oled_goto_nextln>
		return;
 94c:	2a c0       	rjmp	.+84     	; 0x9a2 <oled_putchar_inverse+0x60>
	}
	int i;
	const char j = (c-' ');
 94e:	c0 ee       	ldi	r28, 0xE0	; 224
 950:	c8 0f       	add	r28, r24
	current_col_address+=CHA_WIDTH;
 952:	80 91 2a 01 	lds	r24, 0x012A
 956:	8b 5f       	subi	r24, 0xFB	; 251
 958:	80 93 2a 01 	sts	0x012A, r24

	if(current_col_address/CHA_WIDTH >= MAX_CHARS_A_LINE){
 95c:	80 91 2a 01 	lds	r24, 0x012A
 960:	8d 37       	cpi	r24, 0x7D	; 125
 962:	78 f0       	brcs	.+30     	; 0x982 <oled_putchar_inverse+0x40>
		//current_col_address = 0;
		oled_goto_nextln();
 964:	0e 94 0e 04 	call	0x81c	; 0x81c <oled_goto_nextln>
 968:	0c c0       	rjmp	.+24     	; 0x982 <oled_putchar_inverse+0x40>
 96a:	fc 01       	movw	r30, r24
 96c:	e2 0f       	add	r30, r18
 96e:	f3 1f       	adc	r31, r19
	}


	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		oled_wr_d(~(pgm_read_byte(&font[(int)j][i])));
 970:	e4 91       	lpm	r30, Z
 972:	e0 95       	com	r30
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
 974:	ec 93       	st	X, r30
		//current_col_address = 0;
		oled_goto_nextln();
	}


	for(i = 0; i < 5; i++){
 976:	2f 5f       	subi	r18, 0xFF	; 255
 978:	3f 4f       	sbci	r19, 0xFF	; 255
 97a:	25 30       	cpi	r18, 0x05	; 5
 97c:	31 05       	cpc	r19, r1
 97e:	a9 f7       	brne	.-22     	; 0x96a <oled_putchar_inverse+0x28>
 980:	10 c0       	rjmp	.+32     	; 0x9a2 <oled_putchar_inverse+0x60>
 982:	8c 2f       	mov	r24, r28
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	9c 01       	movw	r18, r24
 988:	22 0f       	add	r18, r18
 98a:	33 1f       	adc	r19, r19
 98c:	22 0f       	add	r18, r18
 98e:	33 1f       	adc	r19, r19
 990:	82 0f       	add	r24, r18
 992:	93 1f       	adc	r25, r19

	oled_putchar(var);
	return 0;
}

void oled_putchar_inverse(char c){
 994:	20 e0       	ldi	r18, 0x00	; 0
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	8d 5e       	subi	r24, 0xED	; 237
 99a:	9e 4f       	sbci	r25, 0xFE	; 254
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
 99c:	af e0       	ldi	r26, 0x0F	; 15
 99e:	b2 e1       	ldi	r27, 0x12	; 18
 9a0:	e4 cf       	rjmp	.-56     	; 0x96a <oled_putchar_inverse+0x28>

	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		oled_wr_d(~(pgm_read_byte(&font[(int)j][i])));
	}
}
 9a2:	cf 91       	pop	r28
 9a4:	08 95       	ret

000009a6 <oled_putstr_inverse>:

void oled_putstr( const char * str){
	while(*str)
		oled_putchar(*str++);
}
void oled_putstr_inverse( const char * str){
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	ec 01       	movw	r28, r24
	while(*str)
 9ac:	88 81       	ld	r24, Y
 9ae:	88 23       	and	r24, r24
 9b0:	31 f0       	breq	.+12     	; 0x9be <oled_putstr_inverse+0x18>
 9b2:	21 96       	adiw	r28, 0x01	; 1
		oled_putchar_inverse(*str++);
 9b4:	0e 94 a1 04 	call	0x942	; 0x942 <oled_putchar_inverse>
void oled_putstr( const char * str){
	while(*str)
		oled_putchar(*str++);
}
void oled_putstr_inverse( const char * str){
	while(*str)
 9b8:	89 91       	ld	r24, Y+
 9ba:	81 11       	cpse	r24, r1
 9bc:	fb cf       	rjmp	.-10     	; 0x9b4 <oled_putstr_inverse+0xe>
		oled_putchar_inverse(*str++);
}
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	08 95       	ret

000009c4 <oled_putstr_P_inverse>:
			str++;
			read = pgm_read_byte(str);
		}
		
}
void oled_putstr_P_inverse( const char * str){
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	ec 01       	movw	r28, r24
	char read = pgm_read_byte(str);
 9ca:	fc 01       	movw	r30, r24
 9cc:	84 91       	lpm	r24, Z
	// Display buffer on LCD.
	while(read){
 9ce:	88 23       	and	r24, r24
 9d0:	39 f0       	breq	.+14     	; 0x9e0 <oled_putstr_P_inverse+0x1c>
		oled_putchar_inverse(read);
 9d2:	0e 94 a1 04 	call	0x942	; 0x942 <oled_putchar_inverse>
		str++;
 9d6:	21 96       	adiw	r28, 0x01	; 1
		read = pgm_read_byte(str);
 9d8:	fe 01       	movw	r30, r28
 9da:	84 91       	lpm	r24, Z
		
}
void oled_putstr_P_inverse( const char * str){
	char read = pgm_read_byte(str);
	// Display buffer on LCD.
	while(read){
 9dc:	81 11       	cpse	r24, r1
 9de:	f9 cf       	rjmp	.-14     	; 0x9d2 <oled_putstr_P_inverse+0xe>
		oled_putchar_inverse(read);
		str++;
		read = pgm_read_byte(str);
	}
	
}
 9e0:	df 91       	pop	r29
 9e2:	cf 91       	pop	r28
 9e4:	08 95       	ret

000009e6 <__divmodhi4>:
 9e6:	97 fb       	bst	r25, 7
 9e8:	07 2e       	mov	r0, r23
 9ea:	16 f4       	brtc	.+4      	; 0x9f0 <__divmodhi4+0xa>
 9ec:	00 94       	com	r0
 9ee:	07 d0       	rcall	.+14     	; 0x9fe <__divmodhi4_neg1>
 9f0:	77 fd       	sbrc	r23, 7
 9f2:	09 d0       	rcall	.+18     	; 0xa06 <__divmodhi4_neg2>
 9f4:	0e 94 16 05 	call	0xa2c	; 0xa2c <__udivmodhi4>
 9f8:	07 fc       	sbrc	r0, 7
 9fa:	05 d0       	rcall	.+10     	; 0xa06 <__divmodhi4_neg2>
 9fc:	3e f4       	brtc	.+14     	; 0xa0c <__divmodhi4_exit>

000009fe <__divmodhi4_neg1>:
 9fe:	90 95       	com	r25
 a00:	81 95       	neg	r24
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	08 95       	ret

00000a06 <__divmodhi4_neg2>:
 a06:	70 95       	com	r23
 a08:	61 95       	neg	r22
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255

00000a0c <__divmodhi4_exit>:
 a0c:	08 95       	ret

00000a0e <__umulhisi3>:
 a0e:	a2 9f       	mul	r26, r18
 a10:	b0 01       	movw	r22, r0
 a12:	b3 9f       	mul	r27, r19
 a14:	c0 01       	movw	r24, r0
 a16:	a3 9f       	mul	r26, r19
 a18:	70 0d       	add	r23, r0
 a1a:	81 1d       	adc	r24, r1
 a1c:	11 24       	eor	r1, r1
 a1e:	91 1d       	adc	r25, r1
 a20:	b2 9f       	mul	r27, r18
 a22:	70 0d       	add	r23, r0
 a24:	81 1d       	adc	r24, r1
 a26:	11 24       	eor	r1, r1
 a28:	91 1d       	adc	r25, r1
 a2a:	08 95       	ret

00000a2c <__udivmodhi4>:
 a2c:	aa 1b       	sub	r26, r26
 a2e:	bb 1b       	sub	r27, r27
 a30:	51 e1       	ldi	r21, 0x11	; 17
 a32:	07 c0       	rjmp	.+14     	; 0xa42 <__udivmodhi4_ep>

00000a34 <__udivmodhi4_loop>:
 a34:	aa 1f       	adc	r26, r26
 a36:	bb 1f       	adc	r27, r27
 a38:	a6 17       	cp	r26, r22
 a3a:	b7 07       	cpc	r27, r23
 a3c:	10 f0       	brcs	.+4      	; 0xa42 <__udivmodhi4_ep>
 a3e:	a6 1b       	sub	r26, r22
 a40:	b7 0b       	sbc	r27, r23

00000a42 <__udivmodhi4_ep>:
 a42:	88 1f       	adc	r24, r24
 a44:	99 1f       	adc	r25, r25
 a46:	5a 95       	dec	r21
 a48:	a9 f7       	brne	.-22     	; 0xa34 <__udivmodhi4_loop>
 a4a:	80 95       	com	r24
 a4c:	90 95       	com	r25
 a4e:	bc 01       	movw	r22, r24
 a50:	cd 01       	movw	r24, r26
 a52:	08 95       	ret

00000a54 <_exit>:
 a54:	f8 94       	cli

00000a56 <__stop_program>:
 a56:	ff cf       	rjmp	.-2      	; 0xa56 <__stop_program>
