
hello_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00000cce  00000d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800174  00800174  00000dd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001afb  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000867  00000000  00000000  00002a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b1  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f8  00000000  00000000  00003998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000549  00000000  00000000  00003c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ee5  00000000  00000000  000041d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  000050be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/************************************************************************/
/* draw the base of the whole menu, all same level items of new         */
/************************************************************************/
void Menu_DrawBase(void){
   0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
static Menu_Item_t* CurrentMenuItem = &NULL_MENU;


Menu_Item_t* Menu_GetCurrentMenu(void)
{
	return CurrentMenuItem;
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
   8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
/************************************************************************/
/* draw the base of the whole menu, all same level items of new         */
/************************************************************************/
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
   c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
	return;
	// get the first item of the same level
	while (
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
  1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
  28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
		 && (MENU_ITEM_READ_POINTER(&ptr->Previous) != NULL)
  2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
		 )
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
  38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
  40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
void Menu_DrawBase(void){
	Menu_Item_t * ptr = Menu_GetCurrentMenu();// payattention here you need some thing
	if ((ptr == &NULL_MENU) || (ptr == NULL))
	return;
	// get the first item of the same level
	while (
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
		(MENU_ITEM_READ_POINTER(&ptr->Previous) != &NULL_MENU)
		 && (MENU_ITEM_READ_POINTER(&ptr->Previous) != NULL)
  4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
		 )
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
		
	// get the first item of the same level
	if (MenuWriteFunc){
  58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
		MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
  68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
  6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 00       	nop
  76:	00 5e       	subi	r16, 0xE0	; 224
  78:	00 00       	nop
		while (( MENU_ITEM_READ_POINTER(&ptr->Next) != &NULL_MENU) && ( MENU_ITEM_READ_POINTER(&ptr->Next) != NULL)) {
  7a:	00 0e       	add	r0, r16
  7c:	00 0e       	add	r0, r16
  7e:	00 28       	or	r0, r0
  80:	7c 28       	or	r7, r12
  82:	7c 28       	or	r7, r12
  84:	08 54       	subi	r16, 0x48	; 72
  86:	7c 54       	subi	r23, 0x4C	; 76
  88:	20 26       	eor	r2, r16
  8a:	10 08       	sbc	r1, r0
  8c:	64 00       	.word	0x0064	; ????
  8e:	28 54       	subi	r18, 0x48	; 72
  90:	28 40       	sbci	r18, 0x08	; 8
			ptr = MENU_ITEM_READ_POINTER(&ptr->Next);
  92:	00 00       	nop
  94:	00 0e       	add	r0, r16
  96:	00 00       	nop
			MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
  98:	00 3c       	cpi	r16, 0xC0	; 192
  9a:	42 00       	.word	0x0042	; ????
  9c:	00 00       	nop
  9e:	42 3c       	cpi	r20, 0xC2	; 194
  a0:	00 00       	nop
  a2:	00 54       	subi	r16, 0x40	; 64
  a4:	38 54       	subi	r19, 0x48	; 72
  a6:	00 10       	cpse	r0, r0
  a8:	10 7c       	andi	r17, 0xC0	; 192
  aa:	10 10       	cpse	r1, r0
  ac:	00 80       	ld	r0, Z
  ae:	60 20       	and	r6, r0
  b0:	00 10       	cpse	r0, r0
		ptr = MENU_ITEM_READ_POINTER(&ptr->Previous);
		
	// get the first item of the same level
	if (MenuWriteFunc){
		MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
		while (( MENU_ITEM_READ_POINTER(&ptr->Next) != &NULL_MENU) && ( MENU_ITEM_READ_POINTER(&ptr->Next) != NULL)) {
  b2:	10 10       	cpse	r1, r0
  b4:	10 00       	.word	0x0010	; ????
  b6:	00 60       	ori	r16, 0x00	; 0
  b8:	60 00       	.word	0x0060	; ????
  ba:	00 20       	and	r0, r0
  bc:	10 08       	sbc	r1, r0
  be:	04 00       	.word	0x0004	; ????
  c0:	00 3c       	cpi	r16, 0xC0	; 192
  c2:	42 3c       	cpi	r20, 0xC2	; 194
  c4:	00 00       	nop
  c6:	44 7e       	andi	r20, 0xE4	; 228
  c8:	40 00       	.word	0x0040	; ????
			ptr = MENU_ITEM_READ_POINTER(&ptr->Next);
			MenuWriteFunc(pgm_read_byte(&(ptr->pos_x)),pgm_read_byte(&(ptr->pos_y)),ptr->Text);
		}
	}
  ca:	44 62       	ori	r20, 0x24	; 36
  cc:	52 4c       	sbci	r21, 0xC2	; 194
  ce:	00 22       	and	r0, r16
  d0:	4a 4a       	sbci	r20, 0xAA	; 170
  d2:	36 00       	.word	0x0036	; ????
  d4:	18 14       	cp	r1, r8
  d6:	7e 10       	cpse	r7, r14
  d8:	00 2e       	mov	r0, r16
  da:	4a 4a       	sbci	r20, 0xAA	; 170
  dc:	32 00       	.word	0x0032	; ????
  de:	3c 4a       	sbci	r19, 0xAC	; 172
  e0:	4a 30       	cpi	r20, 0x0A	; 10
  e2:	00 02       	muls	r16, r16
  e4:	62 1a       	sub	r6, r18
  e6:	06 00       	.word	0x0006	; ????
  e8:	34 4a       	sbci	r19, 0xA4	; 164
  ea:	4a 34       	cpi	r20, 0x4A	; 74
  ec:	00 0c       	add	r0, r0
  ee:	52 52       	subi	r21, 0x22	; 34
  f0:	3c 00       	.word	0x003c	; ????
  f2:	00 6c       	ori	r16, 0xC0	; 192
  f4:	6c 00       	.word	0x006c	; ????
  f6:	00 80       	ld	r0, Z
  f8:	6c 2c       	mov	r6, r12
  fa:	00 00       	nop
  fc:	00 10       	cpse	r0, r0
  fe:	28 44       	sbci	r18, 0x48	; 72
 100:	00 28       	or	r0, r0
 102:	28 28       	or	r2, r8
 104:	28 00       	.word	0x0028	; ????
 106:	00 44       	sbci	r16, 0x40	; 64
 108:	28 10       	cpse	r2, r8
 10a:	00 00       	nop
 10c:	04 52       	subi	r16, 0x24	; 36
 10e:	0c 00       	.word	0x000c	; ????
 110:	3c 42       	sbci	r19, 0x2C	; 44
 112:	5a 1c       	adc	r5, r10
 114:	00 7c       	andi	r16, 0xC0	; 192
 116:	12 12       	cpse	r1, r18
 118:	7c 00       	.word	0x007c	; ????
 11a:	7e 4a       	sbci	r23, 0xAE	; 174
 11c:	4a 34       	cpi	r20, 0x4A	; 74
 11e:	00 3c       	cpi	r16, 0xC0	; 192
 120:	42 42       	sbci	r20, 0x22	; 34
 122:	24 00       	.word	0x0024	; ????
 124:	7e 42       	sbci	r23, 0x2E	; 46
 126:	42 3c       	cpi	r20, 0xC2	; 194
 128:	00 7e       	andi	r16, 0xE0	; 224
 12a:	4a 4a       	sbci	r20, 0xAA	; 170
 12c:	42 00       	.word	0x0042	; ????
 12e:	7e 0a       	sbc	r7, r30
 130:	0a 02       	muls	r16, r26
 132:	00 3c       	cpi	r16, 0xC0	; 192
 134:	42 52       	subi	r20, 0x22	; 34
 136:	74 00       	.word	0x0074	; ????
 138:	7e 08       	sbc	r7, r14
 13a:	08 7e       	andi	r16, 0xE8	; 232
 13c:	00 00       	nop
 13e:	42 7e       	andi	r20, 0xE2	; 226
 140:	42 00       	.word	0x0042	; ????
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	40 3e       	cpi	r20, 0xE0	; 224
 146:	00 7e       	andi	r16, 0xE0	; 224
 148:	18 24       	eor	r1, r8
 14a:	42 00       	.word	0x0042	; ????
 14c:	7e 40       	sbci	r23, 0x0E	; 14
 14e:	40 40       	sbci	r20, 0x00	; 0
 150:	00 7e       	andi	r16, 0xE0	; 224
 152:	0c 0c       	add	r0, r12
 154:	7e 00       	.word	0x007e	; ????
 156:	7e 0c       	add	r7, r14
 158:	30 7e       	andi	r19, 0xE0	; 224
 15a:	00 3c       	cpi	r16, 0xC0	; 192
 15c:	42 42       	sbci	r20, 0x22	; 34
 15e:	3c 00       	.word	0x003c	; ????
 160:	7e 12       	cpse	r7, r30
 162:	12 0c       	add	r1, r2
 164:	00 3c       	cpi	r16, 0xC0	; 192
 166:	62 42       	sbci	r22, 0x22	; 34
 168:	bc 00       	.word	0x00bc	; ????
 16a:	7e 12       	cpse	r7, r30
 16c:	32 4c       	sbci	r19, 0xC2	; 194
 16e:	00 24       	eor	r0, r0
 170:	4a 52       	subi	r20, 0x2A	; 42
 172:	24 00       	.word	0x0024	; ????
 174:	00 02       	muls	r16, r16
 176:	7e 02       	muls	r23, r30
 178:	00 3e       	cpi	r16, 0xE0	; 224
 17a:	40 40       	sbci	r20, 0x00	; 0
 17c:	3e 00       	.word	0x003e	; ????
 17e:	1e 60       	ori	r17, 0x0E	; 14
 180:	60 1e       	adc	r6, r16
 182:	00 7e       	andi	r16, 0xE0	; 224
 184:	30 30       	cpi	r19, 0x00	; 0
 186:	7e 00       	.word	0x007e	; ????
 188:	66 18       	sub	r6, r6
 18a:	18 66       	ori	r17, 0x68	; 104
 18c:	00 00       	nop
 18e:	0e 70       	andi	r16, 0x0E	; 14
 190:	0e 00       	.word	0x000e	; ????
 192:	62 52       	subi	r22, 0x22	; 34
 194:	4a 46       	sbci	r20, 0x6A	; 106
 196:	00 00       	nop
 198:	7e 42       	sbci	r23, 0x2E	; 46
 19a:	42 00       	.word	0x0042	; ????
 19c:	04 08       	sbc	r0, r4
 19e:	10 20       	and	r1, r0
 1a0:	00 00       	nop
 1a2:	42 42       	sbci	r20, 0x22	; 34
 1a4:	7e 00       	.word	0x007e	; ????
 1a6:	00 04       	cpc	r0, r0
 1a8:	02 04       	cpc	r0, r2
 1aa:	00 40       	sbci	r16, 0x00	; 0
 1ac:	40 40       	sbci	r20, 0x00	; 0
 1ae:	40 00       	.word	0x0040	; ????
 1b0:	00 02       	muls	r16, r16
 1b2:	04 00       	.word	0x0004	; ????
 1b4:	00 30       	cpi	r16, 0x00	; 0
 1b6:	48 28       	or	r4, r8
 1b8:	78 00       	.word	0x0078	; ????
 1ba:	7e 48       	sbci	r23, 0x8E	; 142
 1bc:	48 30       	cpi	r20, 0x08	; 8
 1be:	00 30       	cpi	r16, 0x00	; 0
 1c0:	48 48       	sbci	r20, 0x88	; 136
 1c2:	00 00       	nop
 1c4:	30 48       	sbci	r19, 0x80	; 128
 1c6:	48 7e       	andi	r20, 0xE8	; 232
 1c8:	00 30       	cpi	r16, 0x00	; 0
 1ca:	68 58       	subi	r22, 0x88	; 136
 1cc:	10 00       	.word	0x0010	; ????
 1ce:	10 7c       	andi	r17, 0xC0	; 192
 1d0:	12 04       	cpc	r1, r2
 1d2:	00 50       	subi	r16, 0x00	; 0
 1d4:	a8 a8       	ldd	r10, Y+48	; 0x30
 1d6:	98 00       	.word	0x0098	; ????
 1d8:	7e 08       	sbc	r7, r14
 1da:	08 70       	andi	r16, 0x08	; 8
 1dc:	00 00       	nop
 1de:	48 7a       	andi	r20, 0xA8	; 168
 1e0:	40 00       	.word	0x0040	; ????
 1e2:	00 40       	sbci	r16, 0x00	; 0
 1e4:	80 7a       	andi	r24, 0xA0	; 160
 1e6:	00 7e       	andi	r16, 0xE0	; 224
 1e8:	10 28       	or	r1, r0
 1ea:	40 00       	.word	0x0040	; ????
 1ec:	00 42       	sbci	r16, 0x20	; 32
 1ee:	7e 40       	sbci	r23, 0x0E	; 14
 1f0:	00 78       	andi	r16, 0x80	; 128
 1f2:	10 18       	sub	r1, r0
 1f4:	70 00       	.word	0x0070	; ????
 1f6:	78 08       	sbc	r7, r8
 1f8:	08 70       	andi	r16, 0x08	; 8
 1fa:	00 30       	cpi	r16, 0x00	; 0
 1fc:	48 48       	sbci	r20, 0x88	; 136
 1fe:	30 00       	.word	0x0030	; ????
 200:	f8 48       	sbci	r31, 0x88	; 136
 202:	48 30       	cpi	r20, 0x08	; 8
 204:	00 30       	cpi	r16, 0x00	; 0
 206:	48 48       	sbci	r20, 0x88	; 136
 208:	f8 00       	.word	0x00f8	; ????
 20a:	78 08       	sbc	r7, r8
 20c:	08 10       	cpse	r0, r8
 20e:	00 50       	subi	r16, 0x00	; 0
 210:	58 68       	ori	r21, 0x88	; 136
 212:	28 00       	.word	0x0028	; ????
 214:	08 3e       	cpi	r16, 0xE8	; 232
 216:	48 40       	sbci	r20, 0x08	; 8
 218:	00 38       	cpi	r16, 0x80	; 128
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	78 00       	.word	0x0078	; ????
 21e:	00 38       	cpi	r16, 0x80	; 128
 220:	40 38       	cpi	r20, 0x80	; 128
 222:	00 78       	andi	r16, 0x80	; 128
 224:	60 60       	ori	r22, 0x00	; 0
 226:	78 00       	.word	0x0078	; ????
 228:	48 30       	cpi	r20, 0x08	; 8
 22a:	30 48       	sbci	r19, 0x80	; 128
 22c:	00 18       	sub	r0, r0
 22e:	a0 40       	sbci	r26, 0x00	; 0
 230:	38 00       	.word	0x0038	; ????
 232:	48 68       	ori	r20, 0x88	; 136
 234:	58 48       	sbci	r21, 0x88	; 136
 236:	00 00       	nop
 238:	08 3c       	cpi	r16, 0xC8	; 200
 23a:	42 00       	.word	0x0042	; ????
 23c:	00 00       	nop
 23e:	7e 00       	.word	0x007e	; ????
 240:	00 00       	nop
 242:	42 3c       	cpi	r20, 0xC2	; 194
 244:	08 00       	.word	0x0008	; ????
 246:	04 02       	muls	r16, r20
 248:	04 02       	muls	r16, r20
	...

0000024c <__ctors_end>:
 24c:	11 24       	eor	r1, r1
 24e:	1f be       	out	0x3f, r1	; 63
 250:	cf ef       	ldi	r28, 0xFF	; 255
 252:	d4 e0       	ldi	r29, 0x04	; 4
 254:	de bf       	out	0x3e, r29	; 62
 256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
 258:	11 e0       	ldi	r17, 0x01	; 1
 25a:	a0 e0       	ldi	r26, 0x00	; 0
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	ee ec       	ldi	r30, 0xCE	; 206
 260:	fc e0       	ldi	r31, 0x0C	; 12
 262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
 264:	05 90       	lpm	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	a4 37       	cpi	r26, 0x74	; 116
 26a:	b1 07       	cpc	r27, r17
 26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	a4 e7       	ldi	r26, 0x74	; 116
 272:	b1 e0       	ldi	r27, 0x01	; 1
 274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
 276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
 278:	ae 37       	cpi	r26, 0x7E	; 126
 27a:	b2 07       	cpc	r27, r18
 27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
 27e:	0e 94 41 02 	call	0x482	; 0x482 <main>
 282:	0c 94 65 06 	jmp	0xcca	; 0xcca <_exit>

00000286 <__bad_interrupt>:
 286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <adc_read>:
uint8_t adc_read(int channel)
{
	uint8_t data=0;
	int i=0;
	
	volatile uint8_t *p_write= (uint8_t *) (ADC_ADDR_START+channel);
 28a:	fc 01       	movw	r30, r24
 28c:	fc 5e       	subi	r31, 0xEC	; 236
	volatile uint8_t *p_read= (uint8_t*) (ADC_ADDR_START);
	*p_write=channel;		//select Channel of ADC
 28e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	26 ea       	ldi	r18, 0xA6	; 166
 292:	2a 95       	dec	r18
 294:	f1 f7       	brne	.-4      	; 0x292 <adc_read+0x8>
 296:	00 c0       	rjmp	.+0      	; 0x298 <adc_read+0xe>
	_delay_us(500);
	
	data=*p_read;		//read data from ADC
 298:	80 91 00 14 	lds	r24, 0x1400
	i=data;
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	36 ea       	ldi	r19, 0xA6	; 166
 2a0:	3a 95       	dec	r19
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <adc_read+0x16>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <adc_read+0x1c>
	_delay_us(500);
	data=*p_read;		//read data from ADC
 2a6:	20 91 00 14 	lds	r18, 0x1400
	i+=data;
 2aa:	82 0f       	add	r24, r18
 2ac:	91 1d       	adc	r25, r1
 2ae:	26 ea       	ldi	r18, 0xA6	; 166
 2b0:	2a 95       	dec	r18
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <adc_read+0x26>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <adc_read+0x2c>
	_delay_us(500);
	data=*p_read;		//read data from ADC
 2b6:	20 91 00 14 	lds	r18, 0x1400
 2ba:	36 ea       	ldi	r19, 0xA6	; 166
 2bc:	3a 95       	dec	r19
 2be:	f1 f7       	brne	.-4      	; 0x2bc <adc_read+0x32>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <adc_read+0x38>
	i+=data;
 2c2:	82 0f       	add	r24, r18
 2c4:	91 1d       	adc	r25, r1
	_delay_us(500);

	data=(uint8_t) (i/3);		//Average 3 samples
 2c6:	63 e0       	ldi	r22, 0x03	; 3
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__divmodhi4>
 2ce:	86 2f       	mov	r24, r22
	return data;
	
}
 2d0:	08 95       	ret

000002d2 <adc_calibrate>:

uint8_t adc_calibrate(int channel)
{
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
	
	
	volatile uint8_t *p_read= (uint8_t *) (ADC_ADDR_START);
	
	
	data=*p_read;		//read data from ADC
 2da:	80 91 00 14 	lds	r24, 0x1400
	i=data;
 2de:	08 2f       	mov	r16, r24
 2e0:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	2f e3       	ldi	r18, 0x3F	; 63
 2e4:	3d e0       	ldi	r19, 0x0D	; 13
 2e6:	93 e0       	ldi	r25, 0x03	; 3
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	30 40       	sbci	r19, 0x00	; 0
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <adc_calibrate+0x16>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <adc_calibrate+0x20>
 2f2:	00 00       	nop
	_delay_ms(1000);
	printf("\r\nFirst Value %d\r\n",data);
 2f4:	1f 92       	push	r1
 2f6:	8f 93       	push	r24
 2f8:	8e e0       	ldi	r24, 0x0E	; 14
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	9f 93       	push	r25
 2fe:	8f 93       	push	r24
 300:	0e 94 a2 03 	call	0x744	; 0x744 <printf>
	data=*p_read;
 304:	80 91 00 14 	lds	r24, 0x1400
	i+=data;
 308:	08 0f       	add	r16, r24
 30a:	11 1d       	adc	r17, r1
	printf("\r\n2nd Value %d\r\n",data);
 30c:	1f 92       	push	r1
 30e:	8f 93       	push	r24
 310:	81 e2       	ldi	r24, 0x21	; 33
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	9f 93       	push	r25
 316:	8f 93       	push	r24
 318:	0e 94 a2 03 	call	0x744	; 0x744 <printf>
 31c:	2f e3       	ldi	r18, 0x3F	; 63
 31e:	3d e0       	ldi	r19, 0x0D	; 13
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	21 50       	subi	r18, 0x01	; 1
 324:	30 40       	sbci	r19, 0x00	; 0
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <adc_calibrate+0x50>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <adc_calibrate+0x5a>
 32c:	00 00       	nop
	_delay_ms(1000);
	data=*p_read;
 32e:	80 91 00 14 	lds	r24, 0x1400
	i+=data;
	printf("\r\n3rd Value %d\r\n",data);
 332:	c8 2f       	mov	r28, r24
 334:	d0 e0       	ldi	r29, 0x00	; 0
 336:	1f 92       	push	r1
 338:	8f 93       	push	r24
 33a:	82 e3       	ldi	r24, 0x32	; 50
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	9f 93       	push	r25
 340:	8f 93       	push	r24
 342:	0e 94 a2 03 	call	0x744	; 0x744 <printf>
	data=*p_read;
	i+=data;
	printf("\r\n2nd Value %d\r\n",data);
	_delay_ms(1000);
	data=*p_read;
	i+=data;
 346:	98 01       	movw	r18, r16
 348:	2c 0f       	add	r18, r28
 34a:	3d 1f       	adc	r19, r29
	printf("\r\n3rd Value %d\r\n",data);
	
	data=(uint8_t) (i/3);			//Average 10 samples
 34c:	ab ea       	ldi	r26, 0xAB	; 171
 34e:	ba ea       	ldi	r27, 0xAA	; 170
 350:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__umulhisi3>
 354:	ec 01       	movw	r28, r24
 356:	d6 95       	lsr	r29
 358:	c7 95       	ror	r28
 35a:	ce 01       	movw	r24, r28
 35c:	99 27       	eor	r25, r25
	printf("\r\nMean Value %d\r\n",data);
 35e:	9f 93       	push	r25
 360:	8f 93       	push	r24
 362:	83 e4       	ldi	r24, 0x43	; 67
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	9f 93       	push	r25
 368:	8f 93       	push	r24
 36a:	0e 94 a2 03 	call	0x744	; 0x744 <printf>
 36e:	9f e3       	ldi	r25, 0x3F	; 63
 370:	2d e0       	ldi	r18, 0x0D	; 13
 372:	33 e0       	ldi	r19, 0x03	; 3
 374:	91 50       	subi	r25, 0x01	; 1
 376:	20 40       	sbci	r18, 0x00	; 0
 378:	30 40       	sbci	r19, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <adc_calibrate+0xa2>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <adc_calibrate+0xac>
 37e:	00 00       	nop
	_delay_ms(1000);
	return data;
 380:	8d b7       	in	r24, 0x3d	; 61
 382:	9e b7       	in	r25, 0x3e	; 62
 384:	40 96       	adiw	r24, 0x10	; 16
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	9e bf       	out	0x3e, r25	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	8d bf       	out	0x3d, r24	; 61
	
}
 390:	8c 2f       	mov	r24, r28
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <adc_init>:

static uint8_t x_mean=0,y_mean=0;

void adc_init(void)
{
	MCUCR |= (1<<SRE);		//Enable XMEM interface
 39c:	85 b7       	in	r24, 0x35	; 53
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);		//Mask out higher 4 bits of address
 3a2:	80 b7       	in	r24, 0x30	; 48
 3a4:	80 62       	ori	r24, 0x20	; 32
 3a6:	80 bf       	out	0x30, r24	; 48
	x_mean=adc_calibrate(X_CH);
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 69 01 	call	0x2d2	; 0x2d2 <adc_calibrate>
 3b0:	80 93 75 01 	sts	0x0175, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	80 e1       	ldi	r24, 0x10	; 16
 3b6:	8a 95       	dec	r24
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <adc_init+0x1a>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <adc_init+0x20>
	_delay_us(50);
	y_mean=adc_calibrate(Y_CH);
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <adc_calibrate>
 3c4:	80 93 74 01 	sts	0x0174, r24
 3c8:	80 e1       	ldi	r24, 0x10	; 16
 3ca:	8a 95       	dec	r24
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <adc_init+0x2e>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <adc_init+0x34>
 3d0:	08 95       	ret

000003d2 <position>:
	
}

void position(signed int *x_val,signed int *y_val,uint8_t x_mean,uint8_t y_mean)
{
	*x_val=(signed int) ((*x_val-x_mean)*100/128);
 3d2:	dc 01       	movw	r26, r24
 3d4:	ed 91       	ld	r30, X+
 3d6:	fc 91       	ld	r31, X
 3d8:	e4 1b       	sub	r30, r20
 3da:	f1 09       	sbc	r31, r1
 3dc:	34 e6       	ldi	r19, 0x64	; 100
 3de:	3e 9f       	mul	r19, r30
 3e0:	a0 01       	movw	r20, r0
 3e2:	3f 9f       	mul	r19, r31
 3e4:	50 0d       	add	r21, r0
 3e6:	11 24       	eor	r1, r1
 3e8:	55 23       	and	r21, r21
 3ea:	14 f4       	brge	.+4      	; 0x3f0 <position+0x1e>
 3ec:	41 58       	subi	r20, 0x81	; 129
 3ee:	5f 4f       	sbci	r21, 0xFF	; 255
 3f0:	44 0f       	add	r20, r20
 3f2:	45 2f       	mov	r20, r21
 3f4:	44 1f       	adc	r20, r20
 3f6:	55 0b       	sbc	r21, r21
 3f8:	fc 01       	movw	r30, r24
 3fa:	51 83       	std	Z+1, r21	; 0x01
 3fc:	40 83       	st	Z, r20
	*y_val=(signed int) ((*y_val-y_mean)*100/128);
 3fe:	db 01       	movw	r26, r22
 400:	8d 91       	ld	r24, X+
 402:	9c 91       	ld	r25, X
 404:	fc 01       	movw	r30, r24
 406:	e2 1b       	sub	r30, r18
 408:	f1 09       	sbc	r31, r1
 40a:	44 e6       	ldi	r20, 0x64	; 100
 40c:	4e 9f       	mul	r20, r30
 40e:	c0 01       	movw	r24, r0
 410:	4f 9f       	mul	r20, r31
 412:	90 0d       	add	r25, r0
 414:	11 24       	eor	r1, r1
 416:	99 23       	and	r25, r25
 418:	14 f4       	brge	.+4      	; 0x41e <position+0x4c>
 41a:	81 58       	subi	r24, 0x81	; 129
 41c:	9f 4f       	sbci	r25, 0xFF	; 255
 41e:	88 0f       	add	r24, r24
 420:	89 2f       	mov	r24, r25
 422:	88 1f       	adc	r24, r24
 424:	99 0b       	sbc	r25, r25
 426:	db 01       	movw	r26, r22
 428:	8d 93       	st	X+, r24
 42a:	9c 93       	st	X, r25
 42c:	08 95       	ret

0000042e <adc_get_position>:
}

//struct adc_pos {int16_t x; int16_t y;};
	
struct adc_pos adc_get_position(void){
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	00 d0       	rcall	.+0      	; 0x434 <adc_get_position+0x6>
 434:	00 d0       	rcall	.+0      	; 0x436 <adc_get_position+0x8>
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
	struct adc_pos pos;
	pos.x = adc_read(X_CH);
 43a:	86 e0       	ldi	r24, 0x06	; 6
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 45 01 	call	0x28a	; 0x28a <adc_read>
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	9a 83       	std	Y+2, r25	; 0x02
 446:	89 83       	std	Y+1, r24	; 0x01
	pos.y = adc_read(Y_CH);
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 45 01 	call	0x28a	; 0x28a <adc_read>
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	9c 83       	std	Y+4, r25	; 0x04
 454:	8b 83       	std	Y+3, r24	; 0x03
	position(&(pos.x),&(pos.y), x_mean, y_mean);
 456:	20 91 74 01 	lds	r18, 0x0174
 45a:	40 91 75 01 	lds	r20, 0x0175
 45e:	be 01       	movw	r22, r28
 460:	6d 5f       	subi	r22, 0xFD	; 253
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <position>
	return pos;
 46c:	69 81       	ldd	r22, Y+1	; 0x01
 46e:	7a 81       	ldd	r23, Y+2	; 0x02
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	9c 81       	ldd	r25, Y+4	; 0x04
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <main>:
//MENU_ITEM(Menu_1_2, Menu_1_1, Menu_1_1, NULL_MENU, NULL_MENU, NULL, NULL, "1.2");
static FILE oled_stdout =  FDEV_SETUP_STREAM(oled_putchar_printf, NULL, _FDEV_SETUP_WRITE);

int main(void)
{	/* Set up the default menu text write callback, and navigate to an absolute menu item entry. */
		stdout = &oled_stdout;
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	90 93 7b 01 	sts	0x017B, r25
 48a:	80 93 7a 01 	sts	0x017A, r24
		oled_init();
 48e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <oled_init>
		oled_clear();
 492:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <oled_clear>
		oled_putstr_inverse("hello world!!\n");
 496:	85 e5       	ldi	r24, 0x55	; 85
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <oled_putstr_inverse>
		adc_init();
 49e:	0e 94 ce 01 	call	0x39c	; 0x39c <adc_init>
	Menu_Navigate(&Menu_3);*/
	
	while (1)
    { 
		adc_pos_t pos = adc_get_position();
		printf(" x: %d, y:%d \n", pos.x, pos.y);
 4a2:	c4 e6       	ldi	r28, 0x64	; 100
 4a4:	d1 e0       	ldi	r29, 0x01	; 1
	Menu_DrawBase();
	Menu_Navigate(&Menu_3);*/
	
	while (1)
    { 
		adc_pos_t pos = adc_get_position();
 4a6:	0e 94 17 02 	call	0x42e	; 0x42e <adc_get_position>
		printf(" x: %d, y:%d \n", pos.x, pos.y);
 4aa:	9f 93       	push	r25
 4ac:	8f 93       	push	r24
 4ae:	7f 93       	push	r23
 4b0:	6f 93       	push	r22
 4b2:	df 93       	push	r29
 4b4:	cf 93       	push	r28
 4b6:	0e 94 a2 03 	call	0x744	; 0x744 <printf>
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	ef cf       	rjmp	.-34     	; 0x4a6 <main+0x24>

000004c8 <oled_init>:
}

 
 void oled_init(void)
 {
 	MCUCR |= (1<<SRE);        //Enable External Memory interface
 4c8:	85 b7       	in	r24, 0x35	; 53
 4ca:	80 68       	ori	r24, 0x80	; 128
 4cc:	85 bf       	out	0x35, r24	; 53
 	SFIOR |= (1<<XMM2);       //Mask out higher 4 bits of address
 4ce:	80 b7       	in	r24, 0x30	; 48
 4d0:	80 62       	ori	r24, 0x20	; 32
 4d2:	80 bf       	out	0x30, r24	; 48
 	volatile uint8_t *addr= (uint8_t *) OLED_ADDR_CMD_START;		//selcet command mode
 	
 	//code copied from datasheet
 	*addr=0xae;				//turn display off
 4d4:	ef e0       	ldi	r30, 0x0F	; 15
 4d6:	f0 e1       	ldi	r31, 0x10	; 16
 4d8:	8e ea       	ldi	r24, 0xAE	; 174
 4da:	80 83       	st	Z, r24
 	*addr=0xa1;			//column addr 127 is mapped to seg0
 4dc:	81 ea       	ldi	r24, 0xA1	; 161
 4de:	80 83       	st	Z, r24
 	*addr=0xda;				//com pin configuration
 4e0:	8a ed       	ldi	r24, 0xDA	; 218
 4e2:	80 83       	st	Z, r24
 	*addr=0x12;				//com pin config=alternative
 4e4:	82 e1       	ldi	r24, 0x12	; 18
 4e6:	80 83       	st	Z, r24
 	*addr=0xc8;				//o/p scan direction com63 to com0
 4e8:	88 ec       	ldi	r24, 0xC8	; 200
 4ea:	80 83       	st	Z, r24
 	*addr=0xa8;				//multiplex ratio config
 4ec:	88 ea       	ldi	r24, 0xA8	; 168
 4ee:	80 83       	st	Z, r24
 	*addr=0x3f;				//ratio=63
 4f0:	8f e3       	ldi	r24, 0x3F	; 63
 4f2:	80 83       	st	Z, r24
 	*addr=0xd5;				//dclck ratio
 4f4:	85 ed       	ldi	r24, 0xD5	; 213
 4f6:	80 83       	st	Z, r24
 	*addr=0x80;				//divide ratio and oscl. frequency
 4f8:	80 e8       	ldi	r24, 0x80	; 128
 4fa:	80 83       	st	Z, r24
 	*addr=0x81;				//contrast control
 4fc:	81 e8       	ldi	r24, 0x81	; 129
 4fe:	80 83       	st	Z, r24
 	*addr=0x50;				//value of contrast is 50h
 500:	80 e5       	ldi	r24, 0x50	; 80
 502:	80 83       	st	Z, r24
 	*addr=0xd9;				//set pre-charge period
 504:	89 ed       	ldi	r24, 0xD9	; 217
 506:	80 83       	st	Z, r24
 	*addr=0x21;				//value =21
 508:	81 e2       	ldi	r24, 0x21	; 33
 50a:	80 83       	st	Z, r24
 	*addr=0x20;				//set memory addressing mode
 50c:	80 e2       	ldi	r24, 0x20	; 32
 50e:	80 83       	st	Z, r24
 	*addr=0x00;				//horz addressing mode
 510:	10 82       	st	Z, r1
 	*addr=0xdb;				//vcom de-select level mode
 512:	8b ed       	ldi	r24, 0xDB	; 219
 514:	80 83       	st	Z, r24
 	*addr=0x30;				//value=0.83vcc
 516:	80 e3       	ldi	r24, 0x30	; 48
 518:	80 83       	st	Z, r24
 	*addr=0xad;				//master configuration
 51a:	8d ea       	ldi	r24, 0xAD	; 173
 51c:	80 83       	st	Z, r24
 	*addr=0x00;				//select extrenal iref
 51e:	10 82       	st	Z, r1
 	*addr=0xa4;				//out follows ram content
 520:	84 ea       	ldi	r24, 0xA4	; 164
 522:	80 83       	st	Z, r24
 	*addr=0xa6;				//set normal display
 524:	86 ea       	ldi	r24, 0xA6	; 166
 526:	80 83       	st	Z, r24
 	*addr=0xaf;				//display on
 528:	8f ea       	ldi	r24, 0xAF	; 175
 52a:	80 83       	st	Z, r24
 52c:	08 95       	ret

0000052e <oled_goto_xy>:



void oled_goto_xy(uint8_t col,uint8_t row){
	// input: 0 to max - min.
	current_col_address = col;
 52e:	80 93 77 01 	sts	0x0177, r24
	current_pag_address = row;
 532:	60 93 76 01 	sts	0x0176, r22
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
 536:	ef e0       	ldi	r30, 0x0F	; 15
 538:	f0 e1       	ldi	r31, 0x10	; 16
 53a:	91 e2       	ldi	r25, 0x21	; 33
 53c:	90 83       	st	Z, r25
 53e:	80 83       	st	Z, r24
 540:	8f e7       	ldi	r24, 0x7F	; 127
 542:	80 83       	st	Z, r24
 544:	82 e2       	ldi	r24, 0x22	; 34
 546:	80 83       	st	Z, r24
 548:	60 83       	st	Z, r22
 54a:	86 e0       	ldi	r24, 0x06	; 6
 54c:	80 83       	st	Z, r24
 54e:	08 95       	ret

00000550 <oled_goto_nextln>:
	oled_wr_cmd(END_PAGE);
}

void oled_goto_nextln(void){
	// input: 0 to max-min
	current_pag_address++;
 550:	80 91 76 01 	lds	r24, 0x0176
 554:	8f 5f       	subi	r24, 0xFF	; 255
 556:	80 93 76 01 	sts	0x0176, r24
	if(current_pag_address > END_PAGE - START_PAGE)
 55a:	80 91 76 01 	lds	r24, 0x0176
 55e:	87 30       	cpi	r24, 0x07	; 7
 560:	10 f0       	brcs	.+4      	; 0x566 <oled_goto_nextln+0x16>
		current_pag_address = 0;
 562:	10 92 76 01 	sts	0x0176, r1
	oled_goto_xy(0, current_pag_address);
 566:	60 91 76 01 	lds	r22, 0x0176
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 97 02 	call	0x52e	; 0x52e <oled_goto_xy>
 570:	08 95       	ret

00000572 <oled_putchar>:
}
void oled_putchar( const char c){
 572:	cf 93       	push	r28
	if(c == '\n'){
 574:	8a 30       	cpi	r24, 0x0A	; 10
 576:	19 f4       	brne	.+6      	; 0x57e <oled_putchar+0xc>
		oled_goto_nextln();
 578:	0e 94 a8 02 	call	0x550	; 0x550 <oled_goto_nextln>
		return;
 57c:	29 c0       	rjmp	.+82     	; 0x5d0 <oled_putchar+0x5e>
	}
	int i;
	const char j = (c-' ');
 57e:	c0 ee       	ldi	r28, 0xE0	; 224
 580:	c8 0f       	add	r28, r24
	current_col_address+=CHA_WIDTH;
 582:	80 91 77 01 	lds	r24, 0x0177
 586:	8b 5f       	subi	r24, 0xFB	; 251
 588:	80 93 77 01 	sts	0x0177, r24

	if(current_col_address/CHA_WIDTH >= MAX_CHARS_A_LINE){
 58c:	80 91 77 01 	lds	r24, 0x0177
 590:	8d 37       	cpi	r24, 0x7D	; 125
 592:	70 f0       	brcs	.+28     	; 0x5b0 <oled_putchar+0x3e>
		//current_col_address = 0;
		oled_goto_nextln();
 594:	0e 94 a8 02 	call	0x550	; 0x550 <oled_goto_nextln>
 598:	0b c0       	rjmp	.+22     	; 0x5b0 <oled_putchar+0x3e>
 59a:	fc 01       	movw	r30, r24
 59c:	e2 0f       	add	r30, r18
 59e:	f3 1f       	adc	r31, r19
	}


	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		 oled_wr_d(pgm_read_byte(&font[(int)j][i]));
 5a0:	e4 91       	lpm	r30, Z
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
 5a2:	ec 93       	st	X, r30
		//current_col_address = 0;
		oled_goto_nextln();
	}


	for(i = 0; i < 5; i++){
 5a4:	2f 5f       	subi	r18, 0xFF	; 255
 5a6:	3f 4f       	sbci	r19, 0xFF	; 255
 5a8:	25 30       	cpi	r18, 0x05	; 5
 5aa:	31 05       	cpc	r19, r1
 5ac:	b1 f7       	brne	.-20     	; 0x59a <oled_putchar+0x28>
 5ae:	10 c0       	rjmp	.+32     	; 0x5d0 <oled_putchar+0x5e>
 5b0:	8c 2f       	mov	r24, r28
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	9c 01       	movw	r18, r24
 5b6:	22 0f       	add	r18, r18
 5b8:	33 1f       	adc	r19, r19
 5ba:	22 0f       	add	r18, r18
 5bc:	33 1f       	adc	r19, r19
 5be:	82 0f       	add	r24, r18
 5c0:	93 1f       	adc	r25, r19
	current_pag_address++;
	if(current_pag_address > END_PAGE - START_PAGE)
		current_pag_address = 0;
	oled_goto_xy(0, current_pag_address);
}
void oled_putchar( const char c){
 5c2:	20 e0       	ldi	r18, 0x00	; 0
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	80 59       	subi	r24, 0x90	; 144
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
 5ca:	af e0       	ldi	r26, 0x0F	; 15
 5cc:	b2 e1       	ldi	r27, 0x12	; 18
 5ce:	e5 cf       	rjmp	.-54     	; 0x59a <oled_putchar+0x28>

	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		 oled_wr_d(pgm_read_byte(&font[(int)j][i]));
	}
}
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <oled_clear>:
		read = pgm_read_byte(str);
	}
	
}
void oled_clear(void){
	current_col_address = 0;
 5d4:	10 92 77 01 	sts	0x0177, r1
	current_pag_address = 0;
 5d8:	10 92 76 01 	sts	0x0176, r1
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
 5dc:	ef e0       	ldi	r30, 0x0F	; 15
 5de:	f0 e1       	ldi	r31, 0x10	; 16
 5e0:	8e ea       	ldi	r24, 0xAE	; 174
 5e2:	80 83       	st	Z, r24
 5e4:	80 e2       	ldi	r24, 0x20	; 32
 5e6:	80 83       	st	Z, r24
 5e8:	10 82       	st	Z, r1
 5ea:	81 e2       	ldi	r24, 0x21	; 33
 5ec:	80 83       	st	Z, r24
 5ee:	10 82       	st	Z, r1
 5f0:	8f e7       	ldi	r24, 0x7F	; 127
 5f2:	80 83       	st	Z, r24
 5f4:	82 e2       	ldi	r24, 0x22	; 34
 5f6:	80 83       	st	Z, r24
 5f8:	10 82       	st	Z, r1
 5fa:	87 e0       	ldi	r24, 0x07	; 7
 5fc:	80 83       	st	Z, r24
 5fe:	80 e4       	ldi	r24, 0x40	; 64
 600:	80 83       	st	Z, r24
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	94 e0       	ldi	r25, 0x04	; 4
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
 606:	ef e0       	ldi	r30, 0x0F	; 15
 608:	f2 e1       	ldi	r31, 0x12	; 18
 60a:	10 82       	st	Z, r1
 60c:	01 97       	sbiw	r24, 0x01	; 1
	oled_wr_cmd(0x22);
	oled_wr_cmd(0);
	oled_wr_cmd(7);
	oled_wr_cmd(0x40);
	int temp;
	for(temp = 0; temp < 8*128; temp++){
 60e:	00 97       	sbiw	r24, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <oled_clear+0x36>
void oled_wr_cmd(uint8_t cmd){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_CMD_START;
	*addr = cmd;*/
	volatile uint8_t *  addr = (uint8_t *)OLED_ADDR_CMD_START;
	*addr = cmd;
 612:	ef e0       	ldi	r30, 0x0F	; 15
 614:	f0 e1       	ldi	r31, 0x10	; 16
 616:	81 e2       	ldi	r24, 0x21	; 33
 618:	80 83       	st	Z, r24
 61a:	10 82       	st	Z, r1
 61c:	8f e7       	ldi	r24, 0x7F	; 127
 61e:	80 83       	st	Z, r24
 620:	82 e2       	ldi	r24, 0x22	; 34
 622:	80 83       	st	Z, r24
 624:	10 82       	st	Z, r1
 626:	86 e0       	ldi	r24, 0x06	; 6
 628:	80 83       	st	Z, r24
 62a:	8c e7       	ldi	r24, 0x7C	; 124
 62c:	80 83       	st	Z, r24
 62e:	8f ea       	ldi	r24, 0xAF	; 175
 630:	80 83       	st	Z, r24
	oled_wr_cmd(0x22);
	oled_wr_cmd(START_PAGE);
	oled_wr_cmd(END_PAGE);
	oled_wr_cmd(0x7c);
	oled_wr_cmd(0xaf); // on
	oled_goto_xy(0,0);
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	0e 94 97 02 	call	0x52e	; 0x52e <oled_goto_xy>
 63a:	08 95       	ret

0000063c <oled_putchar_printf>:
		oled_wr_d(0);
	}
}

int oled_putchar_printf(char var, FILE *stream){
	if(var == '\r'||var =='\n'){
 63c:	8d 30       	cpi	r24, 0x0D	; 13
 63e:	11 f0       	breq	.+4      	; 0x644 <oled_putchar_printf+0x8>
 640:	8a 30       	cpi	r24, 0x0A	; 10
 642:	19 f4       	brne	.+6      	; 0x64a <oled_putchar_printf+0xe>
		oled_goto_nextln();
 644:	0e 94 a8 02 	call	0x550	; 0x550 <oled_goto_nextln>
		return 0;
 648:	02 c0       	rjmp	.+4      	; 0x64e <oled_putchar_printf+0x12>
	}

	oled_putchar(var);
 64a:	0e 94 b9 02 	call	0x572	; 0x572 <oled_putchar>
	return 0;
}
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	08 95       	ret

00000654 <oled_putchar_inverse>:

void oled_putchar_inverse(char c){
 654:	cf 93       	push	r28
	if(c == '\n'){
 656:	8a 30       	cpi	r24, 0x0A	; 10
 658:	19 f4       	brne	.+6      	; 0x660 <oled_putchar_inverse+0xc>
		oled_goto_nextln();
 65a:	0e 94 a8 02 	call	0x550	; 0x550 <oled_goto_nextln>
		return;
 65e:	2a c0       	rjmp	.+84     	; 0x6b4 <oled_putchar_inverse+0x60>
	}
	int i;
	const char j = (c-' ');
 660:	c0 ee       	ldi	r28, 0xE0	; 224
 662:	c8 0f       	add	r28, r24
	current_col_address+=CHA_WIDTH;
 664:	80 91 77 01 	lds	r24, 0x0177
 668:	8b 5f       	subi	r24, 0xFB	; 251
 66a:	80 93 77 01 	sts	0x0177, r24

	if(current_col_address/CHA_WIDTH >= MAX_CHARS_A_LINE){
 66e:	80 91 77 01 	lds	r24, 0x0177
 672:	8d 37       	cpi	r24, 0x7D	; 125
 674:	78 f0       	brcs	.+30     	; 0x694 <oled_putchar_inverse+0x40>
		//current_col_address = 0;
		oled_goto_nextln();
 676:	0e 94 a8 02 	call	0x550	; 0x550 <oled_goto_nextln>
 67a:	0c c0       	rjmp	.+24     	; 0x694 <oled_putchar_inverse+0x40>
 67c:	fc 01       	movw	r30, r24
 67e:	e2 0f       	add	r30, r18
 680:	f3 1f       	adc	r31, r19
	}


	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		oled_wr_d(~(pgm_read_byte(&font[(int)j][i])));
 682:	e4 91       	lpm	r30, Z
 684:	e0 95       	com	r30
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
 686:	ec 93       	st	X, r30
		//current_col_address = 0;
		oled_goto_nextln();
	}


	for(i = 0; i < 5; i++){
 688:	2f 5f       	subi	r18, 0xFF	; 255
 68a:	3f 4f       	sbci	r19, 0xFF	; 255
 68c:	25 30       	cpi	r18, 0x05	; 5
 68e:	31 05       	cpc	r19, r1
 690:	a9 f7       	brne	.-22     	; 0x67c <oled_putchar_inverse+0x28>
 692:	10 c0       	rjmp	.+32     	; 0x6b4 <oled_putchar_inverse+0x60>
 694:	8c 2f       	mov	r24, r28
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	9c 01       	movw	r18, r24
 69a:	22 0f       	add	r18, r18
 69c:	33 1f       	adc	r19, r19
 69e:	22 0f       	add	r18, r18
 6a0:	33 1f       	adc	r19, r19
 6a2:	82 0f       	add	r24, r18
 6a4:	93 1f       	adc	r25, r19

	oled_putchar(var);
	return 0;
}

void oled_putchar_inverse(char c){
 6a6:	20 e0       	ldi	r18, 0x00	; 0
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	80 59       	subi	r24, 0x90	; 144
 6ac:	9f 4f       	sbci	r25, 0xFF	; 255
void oled_wr_d(uint8_t data){
	// write cmd to oled!! very important to add volatile
	/*volatile char * const addr = OLED_ADDR_DATA_START;
	*addr = data;*/
	volatile uint8_t * const addr = (uint8_t *)OLED_ADDR_DATA_START;
		*addr = data;
 6ae:	af e0       	ldi	r26, 0x0F	; 15
 6b0:	b2 e1       	ldi	r27, 0x12	; 18
 6b2:	e4 cf       	rjmp	.-56     	; 0x67c <oled_putchar_inverse+0x28>

	for(i = 0; i < 5; i++){
		// pay attention, progmem read
		oled_wr_d(~(pgm_read_byte(&font[(int)j][i])));
	}
}
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

000006b8 <oled_putstr_inverse>:

void oled_putstr( const char * str){
	while(*str)
		oled_putchar(*str++);
}
void oled_putstr_inverse( const char * str){
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	ec 01       	movw	r28, r24
	while(*str)
 6be:	88 81       	ld	r24, Y
 6c0:	88 23       	and	r24, r24
 6c2:	31 f0       	breq	.+12     	; 0x6d0 <oled_putstr_inverse+0x18>
 6c4:	21 96       	adiw	r28, 0x01	; 1
		oled_putchar_inverse(*str++);
 6c6:	0e 94 2a 03 	call	0x654	; 0x654 <oled_putchar_inverse>
void oled_putstr( const char * str){
	while(*str)
		oled_putchar(*str++);
}
void oled_putstr_inverse( const char * str){
	while(*str)
 6ca:	89 91       	ld	r24, Y+
 6cc:	81 11       	cpse	r24, r1
 6ce:	fb cf       	rjmp	.-10     	; 0x6c6 <oled_putstr_inverse+0xe>
		oled_putchar_inverse(*str++);
}
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	08 95       	ret

000006d6 <__divmodhi4>:
 6d6:	97 fb       	bst	r25, 7
 6d8:	07 2e       	mov	r0, r23
 6da:	16 f4       	brtc	.+4      	; 0x6e0 <__divmodhi4+0xa>
 6dc:	00 94       	com	r0
 6de:	07 d0       	rcall	.+14     	; 0x6ee <__divmodhi4_neg1>
 6e0:	77 fd       	sbrc	r23, 7
 6e2:	09 d0       	rcall	.+18     	; 0x6f6 <__divmodhi4_neg2>
 6e4:	0e 94 8e 03 	call	0x71c	; 0x71c <__udivmodhi4>
 6e8:	07 fc       	sbrc	r0, 7
 6ea:	05 d0       	rcall	.+10     	; 0x6f6 <__divmodhi4_neg2>
 6ec:	3e f4       	brtc	.+14     	; 0x6fc <__divmodhi4_exit>

000006ee <__divmodhi4_neg1>:
 6ee:	90 95       	com	r25
 6f0:	81 95       	neg	r24
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	08 95       	ret

000006f6 <__divmodhi4_neg2>:
 6f6:	70 95       	com	r23
 6f8:	61 95       	neg	r22
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255

000006fc <__divmodhi4_exit>:
 6fc:	08 95       	ret

000006fe <__umulhisi3>:
 6fe:	a2 9f       	mul	r26, r18
 700:	b0 01       	movw	r22, r0
 702:	b3 9f       	mul	r27, r19
 704:	c0 01       	movw	r24, r0
 706:	a3 9f       	mul	r26, r19
 708:	70 0d       	add	r23, r0
 70a:	81 1d       	adc	r24, r1
 70c:	11 24       	eor	r1, r1
 70e:	91 1d       	adc	r25, r1
 710:	b2 9f       	mul	r27, r18
 712:	70 0d       	add	r23, r0
 714:	81 1d       	adc	r24, r1
 716:	11 24       	eor	r1, r1
 718:	91 1d       	adc	r25, r1
 71a:	08 95       	ret

0000071c <__udivmodhi4>:
 71c:	aa 1b       	sub	r26, r26
 71e:	bb 1b       	sub	r27, r27
 720:	51 e1       	ldi	r21, 0x11	; 17
 722:	07 c0       	rjmp	.+14     	; 0x732 <__udivmodhi4_ep>

00000724 <__udivmodhi4_loop>:
 724:	aa 1f       	adc	r26, r26
 726:	bb 1f       	adc	r27, r27
 728:	a6 17       	cp	r26, r22
 72a:	b7 07       	cpc	r27, r23
 72c:	10 f0       	brcs	.+4      	; 0x732 <__udivmodhi4_ep>
 72e:	a6 1b       	sub	r26, r22
 730:	b7 0b       	sbc	r27, r23

00000732 <__udivmodhi4_ep>:
 732:	88 1f       	adc	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	5a 95       	dec	r21
 738:	a9 f7       	brne	.-22     	; 0x724 <__udivmodhi4_loop>
 73a:	80 95       	com	r24
 73c:	90 95       	com	r25
 73e:	bc 01       	movw	r22, r24
 740:	cd 01       	movw	r24, r26
 742:	08 95       	ret

00000744 <printf>:
 744:	a0 e0       	ldi	r26, 0x00	; 0
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	e8 ea       	ldi	r30, 0xA8	; 168
 74a:	f3 e0       	ldi	r31, 0x03	; 3
 74c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__prologue_saves__+0x20>
 750:	fe 01       	movw	r30, r28
 752:	35 96       	adiw	r30, 0x05	; 5
 754:	61 91       	ld	r22, Z+
 756:	71 91       	ld	r23, Z+
 758:	af 01       	movw	r20, r30
 75a:	80 91 7a 01 	lds	r24, 0x017A
 75e:	90 91 7b 01 	lds	r25, 0x017B
 762:	0e 94 b6 03 	call	0x76c	; 0x76c <vfprintf>
 766:	e2 e0       	ldi	r30, 0x02	; 2
 768:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__epilogue_restores__+0x20>

0000076c <vfprintf>:
 76c:	ac e0       	ldi	r26, 0x0C	; 12
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	ec eb       	ldi	r30, 0xBC	; 188
 772:	f3 e0       	ldi	r31, 0x03	; 3
 774:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__prologue_saves__>
 778:	7c 01       	movw	r14, r24
 77a:	6b 01       	movw	r12, r22
 77c:	8a 01       	movw	r16, r20
 77e:	fc 01       	movw	r30, r24
 780:	17 82       	std	Z+7, r1	; 0x07
 782:	16 82       	std	Z+6, r1	; 0x06
 784:	83 81       	ldd	r24, Z+3	; 0x03
 786:	81 ff       	sbrs	r24, 1
 788:	bd c1       	rjmp	.+890    	; 0xb04 <vfprintf+0x398>
 78a:	ce 01       	movw	r24, r28
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	4c 01       	movw	r8, r24
 790:	f7 01       	movw	r30, r14
 792:	93 81       	ldd	r25, Z+3	; 0x03
 794:	f6 01       	movw	r30, r12
 796:	93 fd       	sbrc	r25, 3
 798:	85 91       	lpm	r24, Z+
 79a:	93 ff       	sbrs	r25, 3
 79c:	81 91       	ld	r24, Z+
 79e:	6f 01       	movw	r12, r30
 7a0:	88 23       	and	r24, r24
 7a2:	09 f4       	brne	.+2      	; 0x7a6 <vfprintf+0x3a>
 7a4:	ab c1       	rjmp	.+854    	; 0xafc <vfprintf+0x390>
 7a6:	85 32       	cpi	r24, 0x25	; 37
 7a8:	39 f4       	brne	.+14     	; 0x7b8 <vfprintf+0x4c>
 7aa:	93 fd       	sbrc	r25, 3
 7ac:	85 91       	lpm	r24, Z+
 7ae:	93 ff       	sbrs	r25, 3
 7b0:	81 91       	ld	r24, Z+
 7b2:	6f 01       	movw	r12, r30
 7b4:	85 32       	cpi	r24, 0x25	; 37
 7b6:	29 f4       	brne	.+10     	; 0x7c2 <vfprintf+0x56>
 7b8:	b7 01       	movw	r22, r14
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 7c0:	e7 cf       	rjmp	.-50     	; 0x790 <vfprintf+0x24>
 7c2:	51 2c       	mov	r5, r1
 7c4:	31 2c       	mov	r3, r1
 7c6:	20 e0       	ldi	r18, 0x00	; 0
 7c8:	20 32       	cpi	r18, 0x20	; 32
 7ca:	a0 f4       	brcc	.+40     	; 0x7f4 <vfprintf+0x88>
 7cc:	8b 32       	cpi	r24, 0x2B	; 43
 7ce:	69 f0       	breq	.+26     	; 0x7ea <vfprintf+0x7e>
 7d0:	30 f4       	brcc	.+12     	; 0x7de <vfprintf+0x72>
 7d2:	80 32       	cpi	r24, 0x20	; 32
 7d4:	59 f0       	breq	.+22     	; 0x7ec <vfprintf+0x80>
 7d6:	83 32       	cpi	r24, 0x23	; 35
 7d8:	69 f4       	brne	.+26     	; 0x7f4 <vfprintf+0x88>
 7da:	20 61       	ori	r18, 0x10	; 16
 7dc:	2c c0       	rjmp	.+88     	; 0x836 <vfprintf+0xca>
 7de:	8d 32       	cpi	r24, 0x2D	; 45
 7e0:	39 f0       	breq	.+14     	; 0x7f0 <vfprintf+0x84>
 7e2:	80 33       	cpi	r24, 0x30	; 48
 7e4:	39 f4       	brne	.+14     	; 0x7f4 <vfprintf+0x88>
 7e6:	21 60       	ori	r18, 0x01	; 1
 7e8:	26 c0       	rjmp	.+76     	; 0x836 <vfprintf+0xca>
 7ea:	22 60       	ori	r18, 0x02	; 2
 7ec:	24 60       	ori	r18, 0x04	; 4
 7ee:	23 c0       	rjmp	.+70     	; 0x836 <vfprintf+0xca>
 7f0:	28 60       	ori	r18, 0x08	; 8
 7f2:	21 c0       	rjmp	.+66     	; 0x836 <vfprintf+0xca>
 7f4:	27 fd       	sbrc	r18, 7
 7f6:	27 c0       	rjmp	.+78     	; 0x846 <vfprintf+0xda>
 7f8:	30 ed       	ldi	r19, 0xD0	; 208
 7fa:	38 0f       	add	r19, r24
 7fc:	3a 30       	cpi	r19, 0x0A	; 10
 7fe:	78 f4       	brcc	.+30     	; 0x81e <vfprintf+0xb2>
 800:	26 ff       	sbrs	r18, 6
 802:	06 c0       	rjmp	.+12     	; 0x810 <vfprintf+0xa4>
 804:	fa e0       	ldi	r31, 0x0A	; 10
 806:	5f 9e       	mul	r5, r31
 808:	30 0d       	add	r19, r0
 80a:	11 24       	eor	r1, r1
 80c:	53 2e       	mov	r5, r19
 80e:	13 c0       	rjmp	.+38     	; 0x836 <vfprintf+0xca>
 810:	8a e0       	ldi	r24, 0x0A	; 10
 812:	38 9e       	mul	r3, r24
 814:	30 0d       	add	r19, r0
 816:	11 24       	eor	r1, r1
 818:	33 2e       	mov	r3, r19
 81a:	20 62       	ori	r18, 0x20	; 32
 81c:	0c c0       	rjmp	.+24     	; 0x836 <vfprintf+0xca>
 81e:	8e 32       	cpi	r24, 0x2E	; 46
 820:	21 f4       	brne	.+8      	; 0x82a <vfprintf+0xbe>
 822:	26 fd       	sbrc	r18, 6
 824:	6b c1       	rjmp	.+726    	; 0xafc <vfprintf+0x390>
 826:	20 64       	ori	r18, 0x40	; 64
 828:	06 c0       	rjmp	.+12     	; 0x836 <vfprintf+0xca>
 82a:	8c 36       	cpi	r24, 0x6C	; 108
 82c:	11 f4       	brne	.+4      	; 0x832 <vfprintf+0xc6>
 82e:	20 68       	ori	r18, 0x80	; 128
 830:	02 c0       	rjmp	.+4      	; 0x836 <vfprintf+0xca>
 832:	88 36       	cpi	r24, 0x68	; 104
 834:	41 f4       	brne	.+16     	; 0x846 <vfprintf+0xda>
 836:	f6 01       	movw	r30, r12
 838:	93 fd       	sbrc	r25, 3
 83a:	85 91       	lpm	r24, Z+
 83c:	93 ff       	sbrs	r25, 3
 83e:	81 91       	ld	r24, Z+
 840:	6f 01       	movw	r12, r30
 842:	81 11       	cpse	r24, r1
 844:	c1 cf       	rjmp	.-126    	; 0x7c8 <vfprintf+0x5c>
 846:	98 2f       	mov	r25, r24
 848:	9f 7d       	andi	r25, 0xDF	; 223
 84a:	95 54       	subi	r25, 0x45	; 69
 84c:	93 30       	cpi	r25, 0x03	; 3
 84e:	28 f4       	brcc	.+10     	; 0x85a <vfprintf+0xee>
 850:	0c 5f       	subi	r16, 0xFC	; 252
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	ff e3       	ldi	r31, 0x3F	; 63
 856:	f9 83       	std	Y+1, r31	; 0x01
 858:	0d c0       	rjmp	.+26     	; 0x874 <vfprintf+0x108>
 85a:	83 36       	cpi	r24, 0x63	; 99
 85c:	31 f0       	breq	.+12     	; 0x86a <vfprintf+0xfe>
 85e:	83 37       	cpi	r24, 0x73	; 115
 860:	71 f0       	breq	.+28     	; 0x87e <vfprintf+0x112>
 862:	83 35       	cpi	r24, 0x53	; 83
 864:	09 f0       	breq	.+2      	; 0x868 <vfprintf+0xfc>
 866:	5b c0       	rjmp	.+182    	; 0x91e <vfprintf+0x1b2>
 868:	22 c0       	rjmp	.+68     	; 0x8ae <vfprintf+0x142>
 86a:	f8 01       	movw	r30, r16
 86c:	80 81       	ld	r24, Z
 86e:	89 83       	std	Y+1, r24	; 0x01
 870:	0e 5f       	subi	r16, 0xFE	; 254
 872:	1f 4f       	sbci	r17, 0xFF	; 255
 874:	44 24       	eor	r4, r4
 876:	43 94       	inc	r4
 878:	51 2c       	mov	r5, r1
 87a:	54 01       	movw	r10, r8
 87c:	15 c0       	rjmp	.+42     	; 0x8a8 <vfprintf+0x13c>
 87e:	38 01       	movw	r6, r16
 880:	f2 e0       	ldi	r31, 0x02	; 2
 882:	6f 0e       	add	r6, r31
 884:	71 1c       	adc	r7, r1
 886:	f8 01       	movw	r30, r16
 888:	a0 80       	ld	r10, Z
 88a:	b1 80       	ldd	r11, Z+1	; 0x01
 88c:	26 ff       	sbrs	r18, 6
 88e:	03 c0       	rjmp	.+6      	; 0x896 <vfprintf+0x12a>
 890:	65 2d       	mov	r22, r5
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	02 c0       	rjmp	.+4      	; 0x89a <vfprintf+0x12e>
 896:	6f ef       	ldi	r22, 0xFF	; 255
 898:	7f ef       	ldi	r23, 0xFF	; 255
 89a:	c5 01       	movw	r24, r10
 89c:	2c 87       	std	Y+12, r18	; 0x0c
 89e:	0e 94 93 05 	call	0xb26	; 0xb26 <strnlen>
 8a2:	2c 01       	movw	r4, r24
 8a4:	83 01       	movw	r16, r6
 8a6:	2c 85       	ldd	r18, Y+12	; 0x0c
 8a8:	2f 77       	andi	r18, 0x7F	; 127
 8aa:	22 2e       	mov	r2, r18
 8ac:	17 c0       	rjmp	.+46     	; 0x8dc <vfprintf+0x170>
 8ae:	38 01       	movw	r6, r16
 8b0:	f2 e0       	ldi	r31, 0x02	; 2
 8b2:	6f 0e       	add	r6, r31
 8b4:	71 1c       	adc	r7, r1
 8b6:	f8 01       	movw	r30, r16
 8b8:	a0 80       	ld	r10, Z
 8ba:	b1 80       	ldd	r11, Z+1	; 0x01
 8bc:	26 ff       	sbrs	r18, 6
 8be:	03 c0       	rjmp	.+6      	; 0x8c6 <vfprintf+0x15a>
 8c0:	65 2d       	mov	r22, r5
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <vfprintf+0x15e>
 8c6:	6f ef       	ldi	r22, 0xFF	; 255
 8c8:	7f ef       	ldi	r23, 0xFF	; 255
 8ca:	c5 01       	movw	r24, r10
 8cc:	2c 87       	std	Y+12, r18	; 0x0c
 8ce:	0e 94 88 05 	call	0xb10	; 0xb10 <strnlen_P>
 8d2:	2c 01       	movw	r4, r24
 8d4:	2c 85       	ldd	r18, Y+12	; 0x0c
 8d6:	20 68       	ori	r18, 0x80	; 128
 8d8:	22 2e       	mov	r2, r18
 8da:	83 01       	movw	r16, r6
 8dc:	23 fc       	sbrc	r2, 3
 8de:	1b c0       	rjmp	.+54     	; 0x916 <vfprintf+0x1aa>
 8e0:	83 2d       	mov	r24, r3
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	48 16       	cp	r4, r24
 8e6:	59 06       	cpc	r5, r25
 8e8:	b0 f4       	brcc	.+44     	; 0x916 <vfprintf+0x1aa>
 8ea:	b7 01       	movw	r22, r14
 8ec:	80 e2       	ldi	r24, 0x20	; 32
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 8f4:	3a 94       	dec	r3
 8f6:	f4 cf       	rjmp	.-24     	; 0x8e0 <vfprintf+0x174>
 8f8:	f5 01       	movw	r30, r10
 8fa:	27 fc       	sbrc	r2, 7
 8fc:	85 91       	lpm	r24, Z+
 8fe:	27 fe       	sbrs	r2, 7
 900:	81 91       	ld	r24, Z+
 902:	5f 01       	movw	r10, r30
 904:	b7 01       	movw	r22, r14
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 90c:	31 10       	cpse	r3, r1
 90e:	3a 94       	dec	r3
 910:	f1 e0       	ldi	r31, 0x01	; 1
 912:	4f 1a       	sub	r4, r31
 914:	51 08       	sbc	r5, r1
 916:	41 14       	cp	r4, r1
 918:	51 04       	cpc	r5, r1
 91a:	71 f7       	brne	.-36     	; 0x8f8 <vfprintf+0x18c>
 91c:	e5 c0       	rjmp	.+458    	; 0xae8 <vfprintf+0x37c>
 91e:	84 36       	cpi	r24, 0x64	; 100
 920:	11 f0       	breq	.+4      	; 0x926 <vfprintf+0x1ba>
 922:	89 36       	cpi	r24, 0x69	; 105
 924:	39 f5       	brne	.+78     	; 0x974 <vfprintf+0x208>
 926:	f8 01       	movw	r30, r16
 928:	27 ff       	sbrs	r18, 7
 92a:	07 c0       	rjmp	.+14     	; 0x93a <vfprintf+0x1ce>
 92c:	60 81       	ld	r22, Z
 92e:	71 81       	ldd	r23, Z+1	; 0x01
 930:	82 81       	ldd	r24, Z+2	; 0x02
 932:	93 81       	ldd	r25, Z+3	; 0x03
 934:	0c 5f       	subi	r16, 0xFC	; 252
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	08 c0       	rjmp	.+16     	; 0x94a <vfprintf+0x1de>
 93a:	60 81       	ld	r22, Z
 93c:	71 81       	ldd	r23, Z+1	; 0x01
 93e:	88 27       	eor	r24, r24
 940:	77 fd       	sbrc	r23, 7
 942:	80 95       	com	r24
 944:	98 2f       	mov	r25, r24
 946:	0e 5f       	subi	r16, 0xFE	; 254
 948:	1f 4f       	sbci	r17, 0xFF	; 255
 94a:	2f 76       	andi	r18, 0x6F	; 111
 94c:	b2 2e       	mov	r11, r18
 94e:	97 ff       	sbrs	r25, 7
 950:	09 c0       	rjmp	.+18     	; 0x964 <vfprintf+0x1f8>
 952:	90 95       	com	r25
 954:	80 95       	com	r24
 956:	70 95       	com	r23
 958:	61 95       	neg	r22
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	8f 4f       	sbci	r24, 0xFF	; 255
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	20 68       	ori	r18, 0x80	; 128
 962:	b2 2e       	mov	r11, r18
 964:	2a e0       	ldi	r18, 0x0A	; 10
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	a4 01       	movw	r20, r8
 96a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__ultoa_invert>
 96e:	a8 2e       	mov	r10, r24
 970:	a8 18       	sub	r10, r8
 972:	44 c0       	rjmp	.+136    	; 0x9fc <vfprintf+0x290>
 974:	85 37       	cpi	r24, 0x75	; 117
 976:	29 f4       	brne	.+10     	; 0x982 <vfprintf+0x216>
 978:	2f 7e       	andi	r18, 0xEF	; 239
 97a:	b2 2e       	mov	r11, r18
 97c:	2a e0       	ldi	r18, 0x0A	; 10
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	25 c0       	rjmp	.+74     	; 0x9cc <vfprintf+0x260>
 982:	f2 2f       	mov	r31, r18
 984:	f9 7f       	andi	r31, 0xF9	; 249
 986:	bf 2e       	mov	r11, r31
 988:	8f 36       	cpi	r24, 0x6F	; 111
 98a:	c1 f0       	breq	.+48     	; 0x9bc <vfprintf+0x250>
 98c:	18 f4       	brcc	.+6      	; 0x994 <vfprintf+0x228>
 98e:	88 35       	cpi	r24, 0x58	; 88
 990:	79 f0       	breq	.+30     	; 0x9b0 <vfprintf+0x244>
 992:	b4 c0       	rjmp	.+360    	; 0xafc <vfprintf+0x390>
 994:	80 37       	cpi	r24, 0x70	; 112
 996:	19 f0       	breq	.+6      	; 0x99e <vfprintf+0x232>
 998:	88 37       	cpi	r24, 0x78	; 120
 99a:	21 f0       	breq	.+8      	; 0x9a4 <vfprintf+0x238>
 99c:	af c0       	rjmp	.+350    	; 0xafc <vfprintf+0x390>
 99e:	2f 2f       	mov	r18, r31
 9a0:	20 61       	ori	r18, 0x10	; 16
 9a2:	b2 2e       	mov	r11, r18
 9a4:	b4 fe       	sbrs	r11, 4
 9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <vfprintf+0x256>
 9a8:	8b 2d       	mov	r24, r11
 9aa:	84 60       	ori	r24, 0x04	; 4
 9ac:	b8 2e       	mov	r11, r24
 9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <vfprintf+0x256>
 9b0:	24 ff       	sbrs	r18, 4
 9b2:	0a c0       	rjmp	.+20     	; 0x9c8 <vfprintf+0x25c>
 9b4:	9f 2f       	mov	r25, r31
 9b6:	96 60       	ori	r25, 0x06	; 6
 9b8:	b9 2e       	mov	r11, r25
 9ba:	06 c0       	rjmp	.+12     	; 0x9c8 <vfprintf+0x25c>
 9bc:	28 e0       	ldi	r18, 0x08	; 8
 9be:	30 e0       	ldi	r19, 0x00	; 0
 9c0:	05 c0       	rjmp	.+10     	; 0x9cc <vfprintf+0x260>
 9c2:	20 e1       	ldi	r18, 0x10	; 16
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <vfprintf+0x260>
 9c8:	20 e1       	ldi	r18, 0x10	; 16
 9ca:	32 e0       	ldi	r19, 0x02	; 2
 9cc:	f8 01       	movw	r30, r16
 9ce:	b7 fe       	sbrs	r11, 7
 9d0:	07 c0       	rjmp	.+14     	; 0x9e0 <vfprintf+0x274>
 9d2:	60 81       	ld	r22, Z
 9d4:	71 81       	ldd	r23, Z+1	; 0x01
 9d6:	82 81       	ldd	r24, Z+2	; 0x02
 9d8:	93 81       	ldd	r25, Z+3	; 0x03
 9da:	0c 5f       	subi	r16, 0xFC	; 252
 9dc:	1f 4f       	sbci	r17, 0xFF	; 255
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <vfprintf+0x280>
 9e0:	60 81       	ld	r22, Z
 9e2:	71 81       	ldd	r23, Z+1	; 0x01
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	0e 5f       	subi	r16, 0xFE	; 254
 9ea:	1f 4f       	sbci	r17, 0xFF	; 255
 9ec:	a4 01       	movw	r20, r8
 9ee:	0e 94 d0 05 	call	0xba0	; 0xba0 <__ultoa_invert>
 9f2:	a8 2e       	mov	r10, r24
 9f4:	a8 18       	sub	r10, r8
 9f6:	fb 2d       	mov	r31, r11
 9f8:	ff 77       	andi	r31, 0x7F	; 127
 9fa:	bf 2e       	mov	r11, r31
 9fc:	b6 fe       	sbrs	r11, 6
 9fe:	0b c0       	rjmp	.+22     	; 0xa16 <vfprintf+0x2aa>
 a00:	2b 2d       	mov	r18, r11
 a02:	2e 7f       	andi	r18, 0xFE	; 254
 a04:	a5 14       	cp	r10, r5
 a06:	50 f4       	brcc	.+20     	; 0xa1c <vfprintf+0x2b0>
 a08:	b4 fe       	sbrs	r11, 4
 a0a:	0a c0       	rjmp	.+20     	; 0xa20 <vfprintf+0x2b4>
 a0c:	b2 fc       	sbrc	r11, 2
 a0e:	08 c0       	rjmp	.+16     	; 0xa20 <vfprintf+0x2b4>
 a10:	2b 2d       	mov	r18, r11
 a12:	2e 7e       	andi	r18, 0xEE	; 238
 a14:	05 c0       	rjmp	.+10     	; 0xa20 <vfprintf+0x2b4>
 a16:	7a 2c       	mov	r7, r10
 a18:	2b 2d       	mov	r18, r11
 a1a:	03 c0       	rjmp	.+6      	; 0xa22 <vfprintf+0x2b6>
 a1c:	7a 2c       	mov	r7, r10
 a1e:	01 c0       	rjmp	.+2      	; 0xa22 <vfprintf+0x2b6>
 a20:	75 2c       	mov	r7, r5
 a22:	24 ff       	sbrs	r18, 4
 a24:	0d c0       	rjmp	.+26     	; 0xa40 <vfprintf+0x2d4>
 a26:	fe 01       	movw	r30, r28
 a28:	ea 0d       	add	r30, r10
 a2a:	f1 1d       	adc	r31, r1
 a2c:	80 81       	ld	r24, Z
 a2e:	80 33       	cpi	r24, 0x30	; 48
 a30:	11 f4       	brne	.+4      	; 0xa36 <vfprintf+0x2ca>
 a32:	29 7e       	andi	r18, 0xE9	; 233
 a34:	09 c0       	rjmp	.+18     	; 0xa48 <vfprintf+0x2dc>
 a36:	22 ff       	sbrs	r18, 2
 a38:	06 c0       	rjmp	.+12     	; 0xa46 <vfprintf+0x2da>
 a3a:	73 94       	inc	r7
 a3c:	73 94       	inc	r7
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <vfprintf+0x2dc>
 a40:	82 2f       	mov	r24, r18
 a42:	86 78       	andi	r24, 0x86	; 134
 a44:	09 f0       	breq	.+2      	; 0xa48 <vfprintf+0x2dc>
 a46:	73 94       	inc	r7
 a48:	23 fd       	sbrc	r18, 3
 a4a:	13 c0       	rjmp	.+38     	; 0xa72 <vfprintf+0x306>
 a4c:	20 ff       	sbrs	r18, 0
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <vfprintf+0x2f0>
 a50:	5a 2c       	mov	r5, r10
 a52:	73 14       	cp	r7, r3
 a54:	18 f4       	brcc	.+6      	; 0xa5c <vfprintf+0x2f0>
 a56:	53 0c       	add	r5, r3
 a58:	57 18       	sub	r5, r7
 a5a:	73 2c       	mov	r7, r3
 a5c:	73 14       	cp	r7, r3
 a5e:	68 f4       	brcc	.+26     	; 0xa7a <vfprintf+0x30e>
 a60:	b7 01       	movw	r22, r14
 a62:	80 e2       	ldi	r24, 0x20	; 32
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	2c 87       	std	Y+12, r18	; 0x0c
 a68:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 a6c:	73 94       	inc	r7
 a6e:	2c 85       	ldd	r18, Y+12	; 0x0c
 a70:	f5 cf       	rjmp	.-22     	; 0xa5c <vfprintf+0x2f0>
 a72:	73 14       	cp	r7, r3
 a74:	10 f4       	brcc	.+4      	; 0xa7a <vfprintf+0x30e>
 a76:	37 18       	sub	r3, r7
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <vfprintf+0x310>
 a7a:	31 2c       	mov	r3, r1
 a7c:	24 ff       	sbrs	r18, 4
 a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <vfprintf+0x338>
 a80:	b7 01       	movw	r22, r14
 a82:	80 e3       	ldi	r24, 0x30	; 48
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	2c 87       	std	Y+12, r18	; 0x0c
 a88:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 a8c:	2c 85       	ldd	r18, Y+12	; 0x0c
 a8e:	22 ff       	sbrs	r18, 2
 a90:	17 c0       	rjmp	.+46     	; 0xac0 <vfprintf+0x354>
 a92:	21 ff       	sbrs	r18, 1
 a94:	03 c0       	rjmp	.+6      	; 0xa9c <vfprintf+0x330>
 a96:	88 e5       	ldi	r24, 0x58	; 88
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <vfprintf+0x334>
 a9c:	88 e7       	ldi	r24, 0x78	; 120
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	b7 01       	movw	r22, r14
 aa2:	0c c0       	rjmp	.+24     	; 0xabc <vfprintf+0x350>
 aa4:	82 2f       	mov	r24, r18
 aa6:	86 78       	andi	r24, 0x86	; 134
 aa8:	59 f0       	breq	.+22     	; 0xac0 <vfprintf+0x354>
 aaa:	21 fd       	sbrc	r18, 1
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <vfprintf+0x346>
 aae:	80 e2       	ldi	r24, 0x20	; 32
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <vfprintf+0x348>
 ab2:	8b e2       	ldi	r24, 0x2B	; 43
 ab4:	27 fd       	sbrc	r18, 7
 ab6:	8d e2       	ldi	r24, 0x2D	; 45
 ab8:	b7 01       	movw	r22, r14
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 ac0:	a5 14       	cp	r10, r5
 ac2:	38 f4       	brcc	.+14     	; 0xad2 <vfprintf+0x366>
 ac4:	b7 01       	movw	r22, r14
 ac6:	80 e3       	ldi	r24, 0x30	; 48
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 ace:	5a 94       	dec	r5
 ad0:	f7 cf       	rjmp	.-18     	; 0xac0 <vfprintf+0x354>
 ad2:	aa 94       	dec	r10
 ad4:	f4 01       	movw	r30, r8
 ad6:	ea 0d       	add	r30, r10
 ad8:	f1 1d       	adc	r31, r1
 ada:	80 81       	ld	r24, Z
 adc:	b7 01       	movw	r22, r14
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 ae4:	a1 10       	cpse	r10, r1
 ae6:	f5 cf       	rjmp	.-22     	; 0xad2 <vfprintf+0x366>
 ae8:	33 20       	and	r3, r3
 aea:	09 f4       	brne	.+2      	; 0xaee <vfprintf+0x382>
 aec:	51 ce       	rjmp	.-862    	; 0x790 <vfprintf+0x24>
 aee:	b7 01       	movw	r22, r14
 af0:	80 e2       	ldi	r24, 0x20	; 32
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 af8:	3a 94       	dec	r3
 afa:	f6 cf       	rjmp	.-20     	; 0xae8 <vfprintf+0x37c>
 afc:	f7 01       	movw	r30, r14
 afe:	86 81       	ldd	r24, Z+6	; 0x06
 b00:	97 81       	ldd	r25, Z+7	; 0x07
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <vfprintf+0x39c>
 b04:	8f ef       	ldi	r24, 0xFF	; 255
 b06:	9f ef       	ldi	r25, 0xFF	; 255
 b08:	2c 96       	adiw	r28, 0x0c	; 12
 b0a:	e2 e1       	ldi	r30, 0x12	; 18
 b0c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__epilogue_restores__>

00000b10 <strnlen_P>:
 b10:	fc 01       	movw	r30, r24
 b12:	05 90       	lpm	r0, Z+
 b14:	61 50       	subi	r22, 0x01	; 1
 b16:	70 40       	sbci	r23, 0x00	; 0
 b18:	01 10       	cpse	r0, r1
 b1a:	d8 f7       	brcc	.-10     	; 0xb12 <strnlen_P+0x2>
 b1c:	80 95       	com	r24
 b1e:	90 95       	com	r25
 b20:	8e 0f       	add	r24, r30
 b22:	9f 1f       	adc	r25, r31
 b24:	08 95       	ret

00000b26 <strnlen>:
 b26:	fc 01       	movw	r30, r24
 b28:	61 50       	subi	r22, 0x01	; 1
 b2a:	70 40       	sbci	r23, 0x00	; 0
 b2c:	01 90       	ld	r0, Z+
 b2e:	01 10       	cpse	r0, r1
 b30:	d8 f7       	brcc	.-10     	; 0xb28 <strnlen+0x2>
 b32:	80 95       	com	r24
 b34:	90 95       	com	r25
 b36:	8e 0f       	add	r24, r30
 b38:	9f 1f       	adc	r25, r31
 b3a:	08 95       	ret

00000b3c <fputc>:
 b3c:	0f 93       	push	r16
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	18 2f       	mov	r17, r24
 b46:	09 2f       	mov	r16, r25
 b48:	eb 01       	movw	r28, r22
 b4a:	8b 81       	ldd	r24, Y+3	; 0x03
 b4c:	81 fd       	sbrc	r24, 1
 b4e:	03 c0       	rjmp	.+6      	; 0xb56 <fputc+0x1a>
 b50:	8f ef       	ldi	r24, 0xFF	; 255
 b52:	9f ef       	ldi	r25, 0xFF	; 255
 b54:	20 c0       	rjmp	.+64     	; 0xb96 <fputc+0x5a>
 b56:	82 ff       	sbrs	r24, 2
 b58:	10 c0       	rjmp	.+32     	; 0xb7a <fputc+0x3e>
 b5a:	4e 81       	ldd	r20, Y+6	; 0x06
 b5c:	5f 81       	ldd	r21, Y+7	; 0x07
 b5e:	2c 81       	ldd	r18, Y+4	; 0x04
 b60:	3d 81       	ldd	r19, Y+5	; 0x05
 b62:	42 17       	cp	r20, r18
 b64:	53 07       	cpc	r21, r19
 b66:	7c f4       	brge	.+30     	; 0xb86 <fputc+0x4a>
 b68:	e8 81       	ld	r30, Y
 b6a:	f9 81       	ldd	r31, Y+1	; 0x01
 b6c:	9f 01       	movw	r18, r30
 b6e:	2f 5f       	subi	r18, 0xFF	; 255
 b70:	3f 4f       	sbci	r19, 0xFF	; 255
 b72:	39 83       	std	Y+1, r19	; 0x01
 b74:	28 83       	st	Y, r18
 b76:	10 83       	st	Z, r17
 b78:	06 c0       	rjmp	.+12     	; 0xb86 <fputc+0x4a>
 b7a:	e8 85       	ldd	r30, Y+8	; 0x08
 b7c:	f9 85       	ldd	r31, Y+9	; 0x09
 b7e:	81 2f       	mov	r24, r17
 b80:	09 95       	icall
 b82:	89 2b       	or	r24, r25
 b84:	29 f7       	brne	.-54     	; 0xb50 <fputc+0x14>
 b86:	2e 81       	ldd	r18, Y+6	; 0x06
 b88:	3f 81       	ldd	r19, Y+7	; 0x07
 b8a:	2f 5f       	subi	r18, 0xFF	; 255
 b8c:	3f 4f       	sbci	r19, 0xFF	; 255
 b8e:	3f 83       	std	Y+7, r19	; 0x07
 b90:	2e 83       	std	Y+6, r18	; 0x06
 b92:	81 2f       	mov	r24, r17
 b94:	90 2f       	mov	r25, r16
 b96:	df 91       	pop	r29
 b98:	cf 91       	pop	r28
 b9a:	1f 91       	pop	r17
 b9c:	0f 91       	pop	r16
 b9e:	08 95       	ret

00000ba0 <__ultoa_invert>:
 ba0:	fa 01       	movw	r30, r20
 ba2:	aa 27       	eor	r26, r26
 ba4:	28 30       	cpi	r18, 0x08	; 8
 ba6:	51 f1       	breq	.+84     	; 0xbfc <__ultoa_invert+0x5c>
 ba8:	20 31       	cpi	r18, 0x10	; 16
 baa:	81 f1       	breq	.+96     	; 0xc0c <__ultoa_invert+0x6c>
 bac:	e8 94       	clt
 bae:	6f 93       	push	r22
 bb0:	6e 7f       	andi	r22, 0xFE	; 254
 bb2:	6e 5f       	subi	r22, 0xFE	; 254
 bb4:	7f 4f       	sbci	r23, 0xFF	; 255
 bb6:	8f 4f       	sbci	r24, 0xFF	; 255
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	af 4f       	sbci	r26, 0xFF	; 255
 bbc:	b1 e0       	ldi	r27, 0x01	; 1
 bbe:	3e d0       	rcall	.+124    	; 0xc3c <__ultoa_invert+0x9c>
 bc0:	b4 e0       	ldi	r27, 0x04	; 4
 bc2:	3c d0       	rcall	.+120    	; 0xc3c <__ultoa_invert+0x9c>
 bc4:	67 0f       	add	r22, r23
 bc6:	78 1f       	adc	r23, r24
 bc8:	89 1f       	adc	r24, r25
 bca:	9a 1f       	adc	r25, r26
 bcc:	a1 1d       	adc	r26, r1
 bce:	68 0f       	add	r22, r24
 bd0:	79 1f       	adc	r23, r25
 bd2:	8a 1f       	adc	r24, r26
 bd4:	91 1d       	adc	r25, r1
 bd6:	a1 1d       	adc	r26, r1
 bd8:	6a 0f       	add	r22, r26
 bda:	71 1d       	adc	r23, r1
 bdc:	81 1d       	adc	r24, r1
 bde:	91 1d       	adc	r25, r1
 be0:	a1 1d       	adc	r26, r1
 be2:	20 d0       	rcall	.+64     	; 0xc24 <__ultoa_invert+0x84>
 be4:	09 f4       	brne	.+2      	; 0xbe8 <__ultoa_invert+0x48>
 be6:	68 94       	set
 be8:	3f 91       	pop	r19
 bea:	2a e0       	ldi	r18, 0x0A	; 10
 bec:	26 9f       	mul	r18, r22
 bee:	11 24       	eor	r1, r1
 bf0:	30 19       	sub	r19, r0
 bf2:	30 5d       	subi	r19, 0xD0	; 208
 bf4:	31 93       	st	Z+, r19
 bf6:	de f6       	brtc	.-74     	; 0xbae <__ultoa_invert+0xe>
 bf8:	cf 01       	movw	r24, r30
 bfa:	08 95       	ret
 bfc:	46 2f       	mov	r20, r22
 bfe:	47 70       	andi	r20, 0x07	; 7
 c00:	40 5d       	subi	r20, 0xD0	; 208
 c02:	41 93       	st	Z+, r20
 c04:	b3 e0       	ldi	r27, 0x03	; 3
 c06:	0f d0       	rcall	.+30     	; 0xc26 <__ultoa_invert+0x86>
 c08:	c9 f7       	brne	.-14     	; 0xbfc <__ultoa_invert+0x5c>
 c0a:	f6 cf       	rjmp	.-20     	; 0xbf8 <__ultoa_invert+0x58>
 c0c:	46 2f       	mov	r20, r22
 c0e:	4f 70       	andi	r20, 0x0F	; 15
 c10:	40 5d       	subi	r20, 0xD0	; 208
 c12:	4a 33       	cpi	r20, 0x3A	; 58
 c14:	18 f0       	brcs	.+6      	; 0xc1c <__ultoa_invert+0x7c>
 c16:	49 5d       	subi	r20, 0xD9	; 217
 c18:	31 fd       	sbrc	r19, 1
 c1a:	40 52       	subi	r20, 0x20	; 32
 c1c:	41 93       	st	Z+, r20
 c1e:	02 d0       	rcall	.+4      	; 0xc24 <__ultoa_invert+0x84>
 c20:	a9 f7       	brne	.-22     	; 0xc0c <__ultoa_invert+0x6c>
 c22:	ea cf       	rjmp	.-44     	; 0xbf8 <__ultoa_invert+0x58>
 c24:	b4 e0       	ldi	r27, 0x04	; 4
 c26:	a6 95       	lsr	r26
 c28:	97 95       	ror	r25
 c2a:	87 95       	ror	r24
 c2c:	77 95       	ror	r23
 c2e:	67 95       	ror	r22
 c30:	ba 95       	dec	r27
 c32:	c9 f7       	brne	.-14     	; 0xc26 <__ultoa_invert+0x86>
 c34:	00 97       	sbiw	r24, 0x00	; 0
 c36:	61 05       	cpc	r22, r1
 c38:	71 05       	cpc	r23, r1
 c3a:	08 95       	ret
 c3c:	9b 01       	movw	r18, r22
 c3e:	ac 01       	movw	r20, r24
 c40:	0a 2e       	mov	r0, r26
 c42:	06 94       	lsr	r0
 c44:	57 95       	ror	r21
 c46:	47 95       	ror	r20
 c48:	37 95       	ror	r19
 c4a:	27 95       	ror	r18
 c4c:	ba 95       	dec	r27
 c4e:	c9 f7       	brne	.-14     	; 0xc42 <__ultoa_invert+0xa2>
 c50:	62 0f       	add	r22, r18
 c52:	73 1f       	adc	r23, r19
 c54:	84 1f       	adc	r24, r20
 c56:	95 1f       	adc	r25, r21
 c58:	a0 1d       	adc	r26, r0
 c5a:	08 95       	ret

00000c5c <__prologue_saves__>:
 c5c:	2f 92       	push	r2
 c5e:	3f 92       	push	r3
 c60:	4f 92       	push	r4
 c62:	5f 92       	push	r5
 c64:	6f 92       	push	r6
 c66:	7f 92       	push	r7
 c68:	8f 92       	push	r8
 c6a:	9f 92       	push	r9
 c6c:	af 92       	push	r10
 c6e:	bf 92       	push	r11
 c70:	cf 92       	push	r12
 c72:	df 92       	push	r13
 c74:	ef 92       	push	r14
 c76:	ff 92       	push	r15
 c78:	0f 93       	push	r16
 c7a:	1f 93       	push	r17
 c7c:	cf 93       	push	r28
 c7e:	df 93       	push	r29
 c80:	cd b7       	in	r28, 0x3d	; 61
 c82:	de b7       	in	r29, 0x3e	; 62
 c84:	ca 1b       	sub	r28, r26
 c86:	db 0b       	sbc	r29, r27
 c88:	0f b6       	in	r0, 0x3f	; 63
 c8a:	f8 94       	cli
 c8c:	de bf       	out	0x3e, r29	; 62
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	cd bf       	out	0x3d, r28	; 61
 c92:	09 94       	ijmp

00000c94 <__epilogue_restores__>:
 c94:	2a 88       	ldd	r2, Y+18	; 0x12
 c96:	39 88       	ldd	r3, Y+17	; 0x11
 c98:	48 88       	ldd	r4, Y+16	; 0x10
 c9a:	5f 84       	ldd	r5, Y+15	; 0x0f
 c9c:	6e 84       	ldd	r6, Y+14	; 0x0e
 c9e:	7d 84       	ldd	r7, Y+13	; 0x0d
 ca0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ca2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ca4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ca6:	b9 84       	ldd	r11, Y+9	; 0x09
 ca8:	c8 84       	ldd	r12, Y+8	; 0x08
 caa:	df 80       	ldd	r13, Y+7	; 0x07
 cac:	ee 80       	ldd	r14, Y+6	; 0x06
 cae:	fd 80       	ldd	r15, Y+5	; 0x05
 cb0:	0c 81       	ldd	r16, Y+4	; 0x04
 cb2:	1b 81       	ldd	r17, Y+3	; 0x03
 cb4:	aa 81       	ldd	r26, Y+2	; 0x02
 cb6:	b9 81       	ldd	r27, Y+1	; 0x01
 cb8:	ce 0f       	add	r28, r30
 cba:	d1 1d       	adc	r29, r1
 cbc:	0f b6       	in	r0, 0x3f	; 63
 cbe:	f8 94       	cli
 cc0:	de bf       	out	0x3e, r29	; 62
 cc2:	0f be       	out	0x3f, r0	; 63
 cc4:	cd bf       	out	0x3d, r28	; 61
 cc6:	ed 01       	movw	r28, r26
 cc8:	08 95       	ret

00000cca <_exit>:
 cca:	f8 94       	cli

00000ccc <__stop_program>:
 ccc:	ff cf       	rjmp	.-2      	; 0xccc <__stop_program>
